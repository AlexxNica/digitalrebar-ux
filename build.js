!function(){"use strict";var globals="undefined"==typeof global?self:global;if("function"!=typeof globals.require){var modules={},cache={},aliases={},has={}.hasOwnProperty,expRe=/^\.\.?(\/|$)/,expand=function(root,name){for(var part,results=[],parts=(expRe.test(name)?root+"/"+name:name).split("/"),i=0,length=parts.length;i<length;i++)part=parts[i],".."===part?results.pop():"."!==part&&""!==part&&results.push(part);return results.join("/")},dirname=function(path){return path.split("/").slice(0,-1).join("/")},localRequire=function(path){return function(name){var absolute=expand(dirname(path),name);return globals.require(absolute,path)}},initModule=function(name,definition){var hot=hmr&&hmr.createHot(name),module={id:name,exports:{},hot:hot};return cache[name]=module,definition(module.exports,localRequire(name),module),module.exports},expandAlias=function(name){return aliases[name]?expandAlias(aliases[name]):name},_resolve=function(name,dep){return expandAlias(expand(dirname(name),dep))},require=function(name,loaderPath){null==loaderPath&&(loaderPath="/");var path=expandAlias(name);if(has.call(cache,path))return cache[path].exports;if(has.call(modules,path))return initModule(path,modules[path]);throw new Error("Cannot find module '"+name+"' from '"+loaderPath+"'")};require.alias=function(from,to){aliases[to]=from};var extRe=/\.[^.\/]+$/,indexRe=/\/index(\.[^\/]+)?$/,addExtensions=function(bundle){if(extRe.test(bundle)){var alias=bundle.replace(extRe,"");has.call(aliases,alias)&&aliases[alias].replace(extRe,"")!==alias+"/index"||(aliases[alias]=bundle)}if(indexRe.test(bundle)){var iAlias=bundle.replace(indexRe,"");has.call(aliases,iAlias)||(aliases[iAlias]=bundle)}};require.register=require.define=function(bundle,fn){if(bundle&&"object"==typeof bundle)for(var key in bundle)has.call(bundle,key)&&require.register(key,bundle[key]);else modules[bundle]=fn,delete cache[bundle],addExtensions(bundle)},require.list=function(){var list=[];for(var item in modules)has.call(modules,item)&&list.push(item);return list};var hmr=globals._hmr&&new globals._hmr(_resolve,require,modules,cache);require._cache=cache,require.hmr=hmr&&hmr.wrap,require.brunch=!0,globals.require=require}}(),function(){"undefined"==typeof window?this:window;require.register("js/app.js",function(exports,require,module){"use strict";window.version="0.2.0",function(){var app=angular.module("app",["ngRoute","ngMaterial","ngCookies","ngAnimate","sparkline","LocalStorageModule","DigestAuthInterceptor","md.data.table","debounce","jsontext","ng-slide-down","swapMdPaint","angular-clipboard","ngMessages","ngVis","ngOrderObjectBy","ui.ace"]);app.config(["$httpProvider","$routeProvider","$mdThemingProvider","apiProvider",function($httpProvider,$routeProvider,$mdThemingProvider,apiProvider){$httpProvider.interceptors.push("digestAuthInterceptor"),$mdThemingProvider.theme("default").primaryPalette("blue",{"default":"800","hue-1":"50"}).accentPalette("red"),$mdThemingProvider.theme("input","default").primaryPalette("grey"),$mdThemingProvider.theme("status_").primaryPalette("green",{"default":"600"}).accentPalette("grey",{"default":"900"}),$mdThemingProvider.theme("status_ready").primaryPalette("green",{"default":"600"}).accentPalette("grey",{"default":"900"}),$mdThemingProvider.theme("status_error").primaryPalette("red",{"default":"700"}).accentPalette("grey",{"default":"900"}),$mdThemingProvider.theme("status_process").primaryPalette("yellow",{"default":"600"}).accentPalette("grey",{"default":"900"}),$mdThemingProvider.theme("status_todo").primaryPalette("yellow",{"default":"300"}).accentPalette("grey",{"default":"900"}),$mdThemingProvider.theme("status_off").primaryPalette("grey",{"default":"900"}).accentPalette("red",{"default":"900"}),$mdThemingProvider.theme("status_queue").primaryPalette("yellow",{"default":"100"}).accentPalette("grey",{"default":"900"}),$mdThemingProvider.theme("status_reserved").primaryPalette("blue",{"default":"500"}).accentPalette("grey",{"default":"900"}),$mdThemingProvider.theme("status_proposed").primaryPalette("blue",{"default":"400"}).accentPalette("grey",{"default":"900"}),$mdThemingProvider.alwaysWatchTheme(!0),$routeProvider.when("/",{redirectTo:"/welcome"}).when("/welcome",{controller:"WelcomeCtrl",controllerAs:"welcome",templateUrl:"views/welcome.html"}).when("/deployments",{controller:"DeploymentsCtrl",controllerAs:"deployments",templateUrl:"views/deployments.html"}).when("/deployments/:id",{controller:"DeploymentsCtrl",controllerAs:"deployments",templateUrl:"views/deployments.html"}).when("/login",{controller:"LoginCtrl",controllerAs:"login",templateUrl:"views/login.html"}).when("/nodes",{controller:"NodesCtrl",controllerAs:"nodes",templateUrl:"views/nodes.html"}).when("/nodes/:id",{controller:"NodesCtrl",controllerAs:"nodes",templateUrl:"views/nodes_singular.html"}).when("/node_roles",{controller:"NodeRolesCtrl",controllerAs:"node_roles",templateUrl:"views/node_roles.html"}).when("/node_roles/:id",{controller:"NodeRolesCtrl",controllerAs:"node_roles",templateUrl:"views/node_roles_singular.html"}).when("/roles",{controller:"RolesCtrl",controllerAs:"roles",templateUrl:"views/roles.html"}).when("/roles/:id",{controller:"RolesCtrl",controllerAs:"roles",templateUrl:"views/roles_singular.html"}).when("/deployment_roles",{controller:"DeploymentRolesCtrl",controllerAs:"deployment_roles",templateUrl:"views/deployment_roles.html"}).when("/deployment_roles/:id",{controller:"DeploymentRolesCtrl",controllerAs:"deployment_roles",templateUrl:"views/deployment_roles_singular.html"}).when("/barclamps",{controller:"BarclampsCtrl",controllerAs:"barclamps",templateUrl:"views/barclamps.html"}).when("/barclamps/:id",{controller:"BarclampsCtrl",controllerAs:"barclamps",templateUrl:"views/barclamps_singular.html"}).when("/networks",{controller:"NetworksCtrl",controllerAs:"networks",templateUrl:"views/networks.html"}).when("/networks/:id",{controller:"NetworksCtrl",controllerAs:"networks",templateUrl:"views/networks_singular.html"}).when("/switches",{controller:"SwitchesCtrl",controllerAs:"switches",templateUrl:"views/switches.html"}).when("/providers",{controller:"ProviderCtrl",controllerAs:"providers",templateUrl:"views/provider.html"}).when("/providers/:id",{controller:"ProviderCtrl",controllerAs:"providers",templateUrl:"views/provider.html"}).when("/annealer",{controller:"AnnealerCtrl",controllerAs:"annealer",templateUrl:"views/annealer.html"}).when("/users",{controller:"UsersCtrl",controllerAs:"users",templateUrl:"views/users.html"}).when("/users/:id",{controller:"UsersCtrl",controllerAs:"users",templateUrl:"views/users.html"}).when("/tenants",{controller:"TenantsCtrl",controllerAs:"tenants",templateUrl:"views/tenants.html"}).when("/tenants/:id",{controller:"TenantsCtrl",controllerAs:"tenants",templateUrl:"views/tenants.html"}).when("/capabilities",{controller:"CapabilitiesCtrl",controllerAs:"capabilities",templateUrl:"views/capabilities.html"}).when("/bios/settings",{controller:"BiosSettingsCtrl",controllerAs:"biossettings",templateUrl:"views/bios_settings.html"}).when("/bios/updates",{controller:"BiosUpdatesCtrl",controllerAs:"biosupdates",templateUrl:"views/bios_updates.html"}).when("/dns",{controller:"DNSCtrl",controllerAs:"dns",templateUrl:"views/dns.html"}).when("/dhcp",{controller:"DHCPCtrl",controllerAs:"dhcp",templateUrl:"views/dhcp.html"}).when("/engine",{controller:"EngineCtrl",controllerAs:"engine",templateUrl:"views/engine.html"}).when("/provisioner/templates",{controller:"ProvisionerCtrl",controllerAs:"provisioner",templateUrl:"views/provisioner_templates.html"}).when("/provisioner/templates/:id",{controller:"ProvisionerCtrl",controllerAs:"provisioner",templateUrl:"views/provisioner_templates.html"}).when("/provisioner/bootenvs",{controller:"ProvisionerCtrl",controllerAs:"provisioner",templateUrl:"views/provisioner_bootenvs.html"}).when("/provisioner/bootenvs/:id",{controller:"ProvisionerCtrl",controllerAs:"provisioner",templateUrl:"views/provisioner_bootenvs.html"}).when("/provisioner/machines",{controller:"ProvisionerCtrl",controllerAs:"provisioner",templateUrl:"views/provisioner_machines.html"}).when("/provisioner/machines/:id",{controller:"ProvisionerCtrl",controllerAs:"provisioner",templateUrl:"views/provisioner_machines.html"}).when("/profiles",{controller:"ProfileCtrl",controllerAs:"profiles",templateUrl:"views/profiles.html"}).when("/profiles/:id",{controller:"ProfileCtrl",controllerAs:"profiles",templateUrl:"views/profiles.html"}).when("/workloads/:id",{controller:"WorkloadsCtrl",controllerAs:"workloads",templateUrl:"views/workloads.html"}).when("/alerts",{controller:"LoggingCtrl",controllerAs:"logging",templateUrl:"views/logging.html"}).when("/api_helper",{controller:"ApiHelperCtrl",controllerAs:"apiHelper",templateUrl:"views/api_helper.html"}).when("/attribs",{controller:"AttribsCtrl",controllerAs:"attribs",templateUrl:"views/attribs.html"}).when("/graphs",{controller:"GraphsCtrl",controllerAs:"graphs",templateUrl:"views/graphs.html"}).otherwise({redirectTo:"/welcome"})}]),app.filter("not",function(){return function(items,field){var result={};return angular.forEach(items,function(value,key){value[field]||(result[key]=value)}),result}}),app.filter("has",function(){return function(items,field){var result={};return angular.forEach(items,function(value,key){value[field]&&(result[key]=value)}),result}}),app.filter("json",function(){return function(text){return JSON.stringify(text,null,"  ")}}),app.directive("elastic",["$timeout",function($timeout){return{restrict:"A",link:function($scope,element){$scope.initialHeight=$scope.initialHeight||element[0].style.height;var resize=function(){element[0].style.height=$scope.initialHeight,element[0].style.height=""+element[0].scrollHeight+"px"};element.on("input change",resize),$timeout(resize,0)}}}]),app.directive("scrollPosition",[function(){return{scope:{scroll:"=scrollPosition"},link:function(scope,element){var handler=function(){scope.scroll=$(element).scrollTop()};element.on("scroll",scope.$apply.bind(scope,handler)),handler()}}}]),app.component("fancylist",{templateUrl:"views/components/fancylist.html",bindings:{initial:"@",title:"@",path:"@"},controller:["$scope","$attrs","$parse",function($scope,$attrs,$parse){function updateItems(val){val&&(ctrl.items=val.map(mapping))}var ctrl=this,mapping=$scope.$parent[$attrs.mapping],deregister=$scope.$parent.$watchCollection($parse($attrs.items),updateItems);$scope.$on("$destroy",deregister),$scope.list=!0,$scope.myOrder="order",$scope.toggleList=function(){$scope.list=!$scope.list,$scope.myOrder="order"}}]}),app.controller("AppCtrl",["$scope","$location","localStorageService","$mdSidenav","api",function($scope,$location,localStorageService,$mdSidenav,api){$scope.toggleSideNav=function(menuId){$mdSidenav(menuId).toggle()},$scope.api=api,$scope.scroll=0,$scope.menu=[{title:"Deployments",icon:"dashboard",path:"/deployments"},{title:"App Catalog",icon:"work",expand:!0,expanded:function(){return $scope.expandWorkloads},toggleExpand:$scope.toggleExpandWorkloads,items:$scope.wizardBarclamps},{title:"Providers",icon:"filter_drama",path:"/providers"},{title:"Nodes",icon:"dns",path:"/nodes"},{title:"Profiles",icon:"group_work",path:"/profiles"},{title:"Networks",icon:"swap_horiz",path:"/networks"}],$scope.managementMenu=[{title:"Services",icon:"tune",expand:!0,expanded:function(){return $scope.expandServices},toggleExpand:$scope.toggleExpandServices,items:[{title:"Rule Engine",icon:"settings_input_composite",path:"/engine",hide:function(){return!$scope.showEngine}},{title:"DHCP Subnets",icon:"device_hub",path:"/dhcp",hide:function(){return!$scope.showDHCP}},{title:"DNS Zones",icon:"public",path:"/dns",hide:function(){return!$scope.showDNS}}]},{title:"Provisioner",icon:"local_shipping",hide:function(){return!$scope.showProvisioner},expand:!0,expanded:function(){return $scope.expandProvisioner},toggleExpand:$scope.toggleExpandProvisioner,items:[{title:"Machines",icon:"dns",path:"/provisioner/machines"},{title:"Boot Environments",icon:"album",path:"/provisioner/bootenvs"},{title:"Templates",icon:"insert_drive_file",path:"/provisioner/templates"}]},{title:"Access",icon:"lock",expand:!0,expanded:function(){return $scope.expandAccess},toggleExpand:$scope.toggleExpandAccess,items:[{title:"Users",icon:"person",path:"/users"},{title:"Tenants",icon:"group",path:"/tenants"},{title:"Capabilities",icon:"traffic",path:"/capabilities"}]},{title:"Alerts",icon:"error",path:"/alerts"},{title:"Advanced",icon:"build",expand:!0,expanded:function(){return $scope.expandAdvanced},toggleExpand:$scope.toggleExpandAdvanced,items:[{title:"API Call Helper",icon:"cloud_upload",path:"/api_helper"},{title:"Workloads/Barclamps",icon:"attach_file",path:"/barclamps"},{title:"Roles",icon:"label_outline",path:"/roles"},{title:"Attributes",icon:"list",path:"/attribs"},{title:"Graphs",icon:"pie_chart_outlined",path:"/graphs"}]}],$scope.setPath=function(path){$location.path(path)},$scope.logout=function(){sessionStorage.clear(),localStorage.clear(),localStorageService.add("username",""),localStorageService.add("password",""),$scope.confirm(event,{title:"Cannot Loggout",message:"At this time, you must close the browser to change user sessions"})}}]),app.run(["$rootScope","$location","$http","$cookies","debounce","$interval","localStorageService","api","$mdDialog","$mdMedia",function($rootScope,$location,$http,$cookies,debounce,$interval,localStorageService,api,$mdDialog,$mdMedia){$rootScope.user,$rootScope.isAuth=function(){return!!$rootScope.user},$rootScope.lastPath="/",$rootScope.expandServices=!1,$rootScope.toggleExpandServices=function(){$rootScope.expandServices=!$rootScope.expandServices},$rootScope.expandHardware=!1,$rootScope.toggleExpandHardware=function(){$rootScope.expandHardware=!$rootScope.expandHardware},$rootScope.expandProvisioner=!1,$rootScope.toggleExpandProvisioner=function(){$rootScope.expandProvisioner=!$rootScope.expandProvisioner},$rootScope.expandAccess=!1,$rootScope.toggleExpandAccess=function(){$rootScope.expandAccess=!$rootScope.expandAccess},$rootScope.expandAdvanced=!1,$rootScope.toggleExpandAdvanced=function(){$rootScope.expandAdvanced=!$rootScope.expandAdvanced},$rootScope.expandWorkloads=!1,$rootScope.toggleExpandWorkloads=function(){$rootScope.expandWorkloads=!$rootScope.expandWorkloads},$rootScope.setTenant=function(tenant_id){api("/api/v2/users/"+$rootScope.user.id,{method:"PUT",data:{current_tenant_id:tenant_id}}).then(function(resp){$rootScope.user=resp.data,api.reload()})},$rootScope.$on("$locationChangeStart",function(event,next){var path=next.split("/#!/")[1];if(path=path?path.toLowerCase():"deployments",!$rootScope.isAuth()){var token=$cookies.get("DrAuthToken"),username=$cookies.get("DrAuthUser");if("undefined"!=typeof token)$rootScope.$emit("login",{username:username}),$rootScope.$emit("startUpdating");else if("login"!==path)return $rootScope.lastPath="/"+path,void $location.path("/login")}"login"===path&&$rootScope.isAuth()&&$location.path("/")}),$rootScope.$on("login",function(event,data){$rootScope.user=data,api("/api/v2/users/"+data.username).then(function(resp){$rootScope.user=resp.data}),api("/api/v2/providers/templates").then(function(resp){$rootScope.providerTemplates=resp.data})}),$rootScope.$on("host",function(event,data){$rootScope.host=data}),$rootScope.$on("title",function(event,data){$rootScope.title=data}),$rootScope.showEditAttribDialog=function(ev,attrib,target){var useFullScreen=$mdMedia("sm")||$mdMedia("xs");$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/editattribdialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{id:attrib.id,value:JSON.stringify(attrib.value,null,"  "),attrib:attrib,api:api,target:target},clickOutsideToClose:!0,fullscreen:useFullScreen})},$rootScope.confirm=function(ev,data){var confirm=$mdDialog.confirm().title(data.title||"Confirm").textContent(data.message).targetEvent(ev).ok(data.yes||"Yes").cancel(data.no||"No");$mdDialog.show(confirm).then(function(){"undefined"!=typeof data.yesCallback&&data.yesCallback()},function(){"undefined"!=typeof data.noCallback&&data.noCallback()})},window.onkeydown=function(e){var key=e.keyCode?e.keyCode:e.which,ctrl=e.ctrlKey,alt=e.altKey,shift=e.shiftKey;$rootScope.$evalAsync(function(){$rootScope.$broadcast("keyDown",{key:key,ctrl:ctrl,alt:alt,shift:shift})})},$rootScope.icons={ready:"check_circle",error:"warning",process:"autorenew",todo:"play_circle_outline",off:"power_settings_new",queue:"update",reserved:"pause_circle_outline",proposed:"add_circle_outline"},$rootScope.states={"-1":"error",0:"ready",1:"todo",2:"process",3:"queue",4:"proposed"}}])}()}),require.register("js/annealer.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("AnnealerCtrl",["$scope","api",function($scope,api){$scope.$emit("title","Annealer"),$scope.selected=-1,$scope.setNode=function(id){$scope.$emit("title","Annealer "+(id!==-1?"("+$scope._nodes[id].name+")":"")),$scope.selected=id},$scope.getNodeRoles=function(status){var roles=[];for(var id in $scope._node_roles){var role=$scope._node_roles[id];status===role.status&&roles.push(role)}return roles},$scope.retryAll=function(){$scope.getNodeRoles("error").forEach(function(role){api("/api/v2/node_roles/"+role.id+"/retry",{method:"PUT"}).then(function(resp){api.addNodeRole(resp.data)})})},$scope.statesList=["error","process","todo","queue"]}])}()}),require.register("js/attribs.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("AttribsCtrl",["$scope","$location","debounce","$routeParams","$mdMedia","$mdDialog","$timeout","api",function($scope,$location,debounce,$routeParams,$mdMedia,$mdDialog,$timeout,api){$scope.$emit("title","Attributes"),$scope.myOrder="name",$scope.hasAttrib=-1,$scope.attribs=[],$scope.editing=!1,$scope.hasAttrib===-1&&api("/api/v2/attribs").then(function(resp){$scope.attribs=resp.data,$scope.hasAttrib=1},function(){$scope.hasAttrib=0})}])}()}),require.register("js/barclamps.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("BarclampsCtrl",["$scope","$location","debounce","$routeParams","$mdMedia","$mdDialog","api",function($scope,$location,debounce,$routeParams,$mdMedia,$mdDialog,api){function updateBarclamp(){$scope.barclamp=$scope._barclamps[$scope.id],$scope.barclamp?hasCallback||(hasCallback=!0,$scope.$on("barclamp"+$scope.barclamp.id+"Done",updateBarclamp)):$location.path("/barclamps")}$scope.$emit("title","Barclamps"),$scope.myOrder="name",$scope.getBarclamps=function(){var barclamps=[];for(var id in $scope._barclamps)barclamps.push($scope._barclamps[id]);return barclamps},$scope.getRoles=function(roles){if(!roles)return[];roles=roles.map(function(role){return role.name});var out=[];for(var id in $scope._roles){var role=$scope._roles[id];roles.includes(role.name)&&out.push(role)}return out},$scope.selectedFile="",$scope.selectFile=function(){document.getElementById("file").click()},$scope.upload=function(){var fileElem=document.getElementById("file");$scope.selectedFile="";var f=fileElem.files[0],r=new FileReader;r.onloadend=function(e){var data=e.target.result;api.addBarclamp(data)},r.readAsBinaryString(f),fileElem.value=""},this.showUpdateBarclampDialog=function(ev){var useFullScreen=$mdMedia("sm")||$mdMedia("xs"),bc=$scope.barclamp;if(!bc){var name="id"+Math.round(1e4*Math.random());$scope.barclamp={name:name,cfg_data:{barclamp:{name:"workload_"+name,description:"User Created Workload "+name,version:"0.0"},roles:[{name:"user_role_"+name,description:"User Created Role "+name,jig:"script",metadata:{scripts:['#!/bin/bash\necho "Show Available Attributes"\ncat $TMPDIR/attrs.json | jq .\nexit 0\n']}}]}}}$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/updatebarclampdialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{barclamp:$scope.barclamp},clickOutsideToClose:!0,fullscreen:useFullScreen})},$scope.id=$routeParams.id,$scope.barclamp={};var hasCallback=!1;Object.keys($scope._barclamps).length?updateBarclamp():$scope.$on("barclampsDone",updateBarclamp)}])}()}),require.register("js/bios_settings.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("BiosSettingsCtrl",["$mdMedia","$mdDialog","$scope","$http","debounce","$timeout","api",function($mdMedia,$mdDialog,$scope,$http,debounce,$timeout,api){$scope.$emit("title","BIOS Settings"),$scope.expand=[],$scope.dirty=!1,$scope.settings=[],$scope.role=-1,$scope.deployment_role=-1,$scope.id=-1,$scope.loadSettings=function(){api.get_id("/api/v2/roles/bios-discover").then(function(resp){$scope.role=resp.data.id,api("/api/v2/deployments/system/deployment_roles").then(function(resp){var deploymentRoles=resp.data;for(var id in deploymentRoles)if(deploymentRoles[id].role_id===$scope.role){$scope.deployment_role=deploymentRoles[id].id;break}api("/api/v2/deployment_roles/"+$scope.deployment_role+"/attribs/bios-set-mapping").then(function(resp){var obj=resp.data;$scope.dirty=!1,$scope.id=obj.id,$scope.settings=[],obj.value.forEach(function(tt){tt.configs.forEach(function(c){var newobj={};newobj.role=tt.role;for(var i in $scope._roles)if($scope._roles[i].name===tt.role){newobj.role_id=$scope._roles[i].id;break}newobj.name=c.name,newobj.parent=c.parent,newobj.match=[],newobj.values=[],Object.keys(tt.match).forEach(function(key){var om={id:key};"string"==typeof tt.match[key]?(om.pattern=tt.match[key],om.op="exact"):(om.pattern=tt.match[key].match,om.op=tt.match[key].op),newobj.match.push(om)}),Object.keys(c.settings).forEach(function(key){var ov={id:key,value:c.settings[key]};newobj.values.push(ov)}),$scope.settings.push(newobj)})})},function(err){api.toast("Error Bios Setting Data","bios_setting",err.data)})})})},this.dirtyData=function(){$scope.dirty=!0},this.toggleExpand=function(id){$scope.expand[id]=!$scope.expand[id]},$scope.removeValue=function(index,type,id){for(var i in $scope.settings[index][type])if($scope.settings[index][type][i].id===id){$scope.settings[index][type].splice(i,1),api.toast("Removed "+type+" "+id,type,index),$scope.dirty=!0;break}},$scope.addValue=function(index,type){var o={id:"not set",value:"undefined",op:"exact"};$scope.settings[index][type].push(o),$scope.dirty=!0},$scope.createHardwareSectionPrompt=function(ev,ind,parent){var confirm=$mdDialog.prompt().title("Creating Section for "+$scope.settings[ind].name).textContent("Section Name:").placeholder("default").ariaLabel("Section").targetEvent(ev).ok("Add").cancel("Cancel");$mdDialog.show(confirm).then(function(result){var o={role:$scope.settings[ind].role,name:result,parent:parent,match:[],values:[]};$scope.settings.push(o)},function(){console.log("did not create")})},$scope.createHardwareClassPrompt=function(ev){var confirm=$mdDialog.prompt().title("Creating Hardware Class:").textContent("Role:Group Name.").placeholder("role:default").ariaLabel("Role:Class").targetEvent(ev).ok("Add").cancel("Cancel");$mdDialog.show(confirm).then(function(result){var res=result.split(":"),o={role:res[0],name:res[1]||"default",match:[],values:[]};$scope.settings.push(o)},function(){console.log("did not create")})},$scope.saveSetting=function(){var roles={};$scope.settings.forEach(function(block){roles[block.role]||(roles[block.role]={role:block.role,configs:[],match:{}});var c={name:block.name,settings:{}};block.parent&&(c.parent=block.parent),block.values.forEach(function(s){c.settings[s.id]=s.value}),roles[block.role].configs.push(c),"default"===block.name&&block.match.forEach(function(m){"exact"===m.op?roles[block.role].match[m.id]=m.pattern:roles[block.role].match[m.id]={op:m.op,match:m.pattern,__sm_leaf:"true,"}})});var data=[];for(var r in roles)data.push(roles[r]);var obj={value:data};obj.deployment_role_id=$scope.deployment_role,api("/api/v2/deployment_roles/"+$scope.deployment_role+"/propose",{method:"PUT"}).then(function(){api("/api/v2/attribs/"+$scope.id,{method:"PUT",data:obj}).then(function(){api.toast("Updated Attrib!"),api("/api/v2/deployment_roles/"+$scope.deployment_role+"/commit",{method:"PUT"}).then(function(){api.toast("Committed!"),$scope.dirty=!1})},function(err){api.toast("Error updating values","attribs",err.data)})})},$scope.deleteSetting=function(event,id){$scope.dirty=!0,delete $scope.settings[id]},$scope.loadSettings()}])}()}),require.register("js/bios_updates.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("BiosUpdatesCtrl",["$mdMedia","$mdDialog","$scope","$http","debounce","$timeout","api",function($mdMedia,$mdDialog,$scope,$http,debounce,$timeout,api){$scope.$emit("title","Firmware Updates"),$scope.expand={},$scope.dirty=!1,$scope.updates=[],$scope.role=-1,$scope.deployment_role=-1,$scope.id=-1,$scope.attribute="bios-firmware-list",$scope.attributes={"bios-firmware-list":"BIOS","ipmi-firmware-list":"IPMI"},$scope.loadUpdates=function(){api("/api/v2/roles/bios-flash").then(function(resp){var robj=resp.data;$scope.role=robj.id,api("/api/v2/deployments/system/deployment_roles").then(function(resp){var drobj=resp.data;for(var id in drobj)if(drobj[id].role_id===$scope.role){$scope.deployment_role=drobj[id].id;break}api("/api/v2/deployment_roles/"+$scope.deployment_role+"/attribs/"+$scope.attribute).then(function(resp){var obj=resp.data,temp=obj.value;$scope.updates=[],$scope.dirty=!1,$scope.id=obj.id,temp.forEach(function(tt){var newobj={};newobj.match={},newobj["package"]={},Object.keys(tt).forEach(function(key){"package"===key||"package-sha256sum"===key||"package-source"===key||"script"===key?newobj["package"][key]=tt[key]:newobj.match[key]={id:key,value:tt[key]}}),$scope.updates.push(newobj)})},function(err){api.toast("Error Firmware Updates Data",$scope.attribute,err.data)})})})},this.toggleExpand=function(id){$scope.expand[id]=!$scope.expand[id]},this.dirtyData=function(){$scope.dirty=!0},$scope.removeValue=function(index,id){delete $scope.updates[index].match[id],api.toast("Removed Match "+id,"match",index),$scope.dirty=!0},$scope.addValue=function(index){$scope.updates[index].match["not set"]={id:"not set",value:"undefined"},$scope.dirty=!0},$scope.createUpdate=function(ev){var confirm=$mdDialog.prompt().title("Creating Package").textContent("Package Name:").placeholder("default").ariaLabel("Package").targetEvent(ev).ok("Add").cancel("Cancel");$mdDialog.show(confirm).then(function(result){var o={match:{"bios-version":{id:"bios-version",value:"0.0.0"},system_product:{id:"system_product",value:"model"},system_manufacturer:{id:"vendor",value:"system_manufacturer"}},"package":{"package":result,script:"#!/usr/bin/env bash","package-source":"http://","package-sha256sum":"not set"}};$scope.updates.push(o),$scope.dirty=!0},function(){console.log("did not create")})},$scope.saveSetting=function(){var o=[],_loop=function(i){var mypackage={script:$scope.updates[i]["package"].script,"package":$scope.updates[i]["package"]["package"],"package-source":$scope.updates[i]["package"]["package-source"],"package-sha256sum":$scope.updates[i]["package"]["package-sha256sum"]},match=$scope.updates[i].match;Object.keys(match).forEach(function(key){mypackage[match[key].id]=match[key].value}),o.push(mypackage)};for(var i in $scope.updates)_loop(i);var obj={value:o};obj.deployment_role_id=$scope.deployment_role,api("/api/v2/deployment_roles/"+$scope.deployment_role+"/propose",{method:"PUT"}).then(function(){api("/api/v2/attribs/"+$scope.id,{method:"PUT",data:obj}).then(function(){api("/api/v2/deployment_roles/"+$scope.deployment_role+"/commit",{method:"PUT"}).then(function(){api.toast("Updated Firmware Attrib!")})},function(err){api.toast("Error updating firmware values","attribs",err.data)})})},$scope.deleteSetting=function(event,id){delete $scope.updates[id]},$scope.loadUpdates()}])}()}),require.register("js/capabilities.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("CapabilitiesCtrl",["$scope","api","$mdMedia","$mdDialog",function($scope,api,$mdMedia,$mdDialog){$scope.$emit("title","Capabilities"),$scope.updateCapability=function(cap){console.debug({includes:cap.includes}),api("/api/v2/capabilities/"+cap.id,{method:"PUT",data:{includes:cap.includes}}).then(api.getHealth,api.getHealth)},$scope.deleteCapability=function(cap){$scope.confirm(event,{title:"Delete Capability",message:"Are you sure you want to delete "+cap.name+" capability?",yesCallback:function(){api("/api/v2/capabilities/"+cap.id,{method:"DELETE"}).then(function(){api.toast("Deleted "+cap.name+" capability"),api.getHealth()},function(err){api.toast("Error Deleted Capability","capability",err.data)})}})},$scope.rawCapabilities=function(current){var raw=[];for(var i in $scope._capabilities)current.includes($scope._capabilities[i].name)||raw.push($scope._capabilities[i].name);return raw},$scope.createCapabilityPrompt=function(ev){$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/addcapabilitydialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{editing:!1},clickOutsideToClose:!0,fullscreen:!1})}}]).filter("groupsonly",function(){return function(cap){var filter=[];for(var i in cap)"dr-groups"===cap[i].source|"user-defined"===cap[i].source&&filter.push(cap[i]);return filter}})}()}),require.register("js/deployment_roles.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("DeploymentRolesCtrl",["$scope","$location","debounce","$routeParams","$mdMedia","$mdDialog","$timeout","api",function($scope,$location,debounce,$routeParams,$mdMedia,$mdDialog,$timeout,api){function updateDeploymentRole(){$scope.editing||($scope.deployment_role=$scope._deployment_roles[$scope.id],$scope.deployment_role?($scope.hasAttrib===-1&&api("/api/v2/deployment_roles/"+$scope.deployment_role.id+"/attribs").then(function(resp){var obj=resp.data;$scope.attribs=obj,obj.forEach(function(attrib){attrib.len=JSON.stringify(attrib.value).length,attrib.preview=JSON.stringify(attrib.value,null,"  ").trim().replace(/[\s\n]/g,""),attrib.preview.length>73&&(attrib.preview=attrib.preview.substr(0,67)+"...")}),$scope.hasAttrib=1},function(){$scope.hasAttrib=0}),hasCallback||(hasCallback=!0,$scope.$on("deployment_role"+$scope.deployment_role.id+"Done",updateDeploymentRole))):$location.path("/deployment_roles"))}$scope.$emit("title","Deployment Roles");var deployment_roles=this;$scope.myOrder="id",this.selected=[],$scope.getDeploymentRoles=function(){var roles=[];for(var id in $scope._deployment_roles)roles.push($scope._deployment_roles[id]);return roles},$scope.propose=function(){$scope.deployment_role.id&&api("/api/v2/deployment_roles/"+$scope.deployment_role.id+"/propose",{method:"PUT"}).then(function(){$scope.deployment_role.proposed=!0,api.addDeploymentRole},function(err){api.toast("Error Proposing Deployment Role","deployment_role",err.data)})},$scope.commit=function(){$scope.deployment_role.id&&api("/api/v2/deployment_roles/"+$scope.deployment_role.id+"/commit",{method:"PUT"}).then(function(){$scope.deployment_role.proposed=!1,api.addDeploymentRole},function(err){api.toast("Error Committing Deployment Role","deployment_role",err.data)})},$scope.destroySelected=function(){$scope.confirm(event,{title:"Destroy Deployment Roles",message:"Are you sure you want to destroy the selected deployment roles?",yesCallback:function(){deployment_roles.selected.forEach(function(deployment_role){deployment_role.id&&api("/api/v2/deployment_roles/"+deployment_role.id,{method:"DELETE"}).then(function(){api.remove("deployment_role",deployment_role.id)}),deployment_roles.selected=[]})}})},$scope.destroy=function(){$scope.confirm(event,{title:"Destroy Deployment Role",message:"Are you sure you want to destroy this deployment role?",yesCallback:function(){$scope.deployment_role.id&&api("/api/v2/deployment_roles/"+$scope.deployment_role.id,{method:"DELETE"}).then(function(){api.remove("deployment_role",$scope.deployment_role.id),
$location.path("/deployment_roles")})}})},$scope.id=$routeParams.id,$scope.target={obj:"deployment_role_id",id:$routeParams.id},$scope.deployment_role={},$scope.hasAttrib=-1,$scope.attribs=[],$scope.editing=!1;var hasCallback=!1;Object.keys($scope._deployment_roles).length?updateDeploymentRole():$scope.$on("deployment_rolesDone",updateDeploymentRole),$scope.getApiUpdate=function(){!$scope.editing&&$scope.node_role&&api.fetch("node_role",$scope.id).then(function(){$scope.updateInterval=$timeout($scope.getApiUpdate,2e3)})},$scope.getApiUpdate(),$scope.$on("$routeChangeStart",function(){$timeout.cancel($scope.updateInterval)})}])}()}),require.register("js/deployments.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("DeploymentsCtrl",["$mdMedia","$mdDialog","$scope","$http","debounce","$timeout","$routeParams","api",function($mdMedia,$mdDialog,$scope,$http,debounce,$timeout,$routeParams,api){$scope.$emit("title","Deployments");var deployments=this;this.showNodeDialog=function(ev,node){$scope.node=node;var useFullScreen=$mdMedia("sm")||$mdMedia("xs");$mdDialog.show({controller:"DialogController",controllerAs:"ctrl",templateUrl:"nodedialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{node:$scope.node},clickOutsideToClose:!0,fullscreen:useFullScreen})},$scope.rawProfiles=function(current){var raw=[];for(var i in $scope._profiles)current.includes($scope._profiles[i].name)||raw.push($scope._profiles[i].name);return raw},$scope.showAddNodeDialog=function(ev,id){var useFullScreen=$mdMedia("sm")||$mdMedia("xs"),providers=[],provider=void 0;for(var _id in $scope._providers)providers.push($scope._providers[_id]),"metal"!==$scope._providers[_id].name&&"phantom"!==$scope._providers[_id].name&&"undefined"==typeof provider&&(provider=_id);$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/addnodedialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{base_name:"digital-rebar-node",_providers:providers,provider:provider,hasProvider:providers.length>0,_profiles:$scope.rawProfiles([]),profiles:[],add_os:"default_os",number:1,_deployments:$scope._deployments,deployment_id:id},clickOutsideToClose:!0,fullscreen:useFullScreen})},$scope.expand={},$routeParams.id&&($scope.expand[$routeParams.id]=!0),this.toggleExpand=function(deployment){$scope.expand[deployment.id]=!$scope.expand[deployment.id]},$scope.matrix={},this.getMatrixData=function(){Object.keys($scope._deployments).forEach(function(id){var matrix=$scope.matrix[id]=$scope.matrix[id]||{loading:!0,services:[],deployment_roles:[],nodes:{}};api("/api/status/matrix/"+id).then(function(resp){matrix.loading=!1,matrix.error=!1,angular.extend($scope.matrix[id],resp.data)},function(){matrix.loading=!1,matrix.error=!0})})},$scope.getNodeIds=function(deployment_id){var nodes=[];for(var i in $scope._nodes){var node=$scope._nodes[i];node.deployment_id!==deployment_id||node.system||nodes.push(i)}return nodes.sort(function(a,b){return $scope._nodes[a].name.localeCompare($scope._nodes[b].name)}),nodes},$scope.assignDeploymentToTenant=function(deployment_id,tenant_id){api("/api/v2/deployments/"+deployment_id,{method:"PUT",data:{tenant_id:tenant_id}}).then(function(resp){api.addDeployment(resp.data)})},$scope.getDeploymentRoleIds=function(deployment_id){var roles=[];for(var i in $scope._deployment_roles){var role=$scope._deployment_roles[i];role.deployment_id===deployment_id&&roles.push(i)}return roles.sort(function(a,b){var rac=0,rbc=0;if("undefined"!=typeof a){var dra=$scope._deployment_roles[a];if("undefined"!=typeof dra){var ra=$scope._roles[dra.role_id];"undefined"!=typeof ra&&(rac=ra.cohort)}}if("undefined"!=typeof b){var drb=$scope._deployment_roles[b];if("undefined"!=typeof drb){var rb=$scope._roles[drb.role_id];"undefined"!=typeof rb&&(rbc=rb.cohort)}}return rac-rbc}),roles},$scope.getNodeRoleIds=function(deployment_id){if("undefined"==typeof $scope.phantoms[deployment_id])return[];var roles=[];for(var i in $scope._node_roles){var role=$scope._node_roles[i];role.node_id===$scope.phantoms[deployment_id].id&&roles.push(i)}return roles.sort(function(a,b){var rac=0,rbc=0;if("undefined"!=typeof a){var dra=$scope._node_roles[a];if("undefined"!=typeof dra){var ra=$scope._roles[dra.role_id];"undefined"!=typeof ra&&(rac=ra.cohort)}}if("undefined"!=typeof b){var drb=$scope._node_roles[b];if("undefined"!=typeof drb){var rb=$scope._roles[drb.role_id];"undefined"!=typeof rb&&(rbc=rb.cohort)}}return rac-rbc}),roles},this.getNodeCounts=function(deployment){var result=[0,0,0,0];for(var i in $scope._nodes){var node=$scope._nodes[i];node.deployment_id!==deployment.id||node.system||result[node.simpleState]++}return result},this.opts={sliceColors:["#8BC34A","#F44336","#03A9F4","#616161"],tooltipFormat:"{{value}}",disableTooltips:!0,disableHighlight:!0,borderWidth:2,borderColor:"#fff",fillColor:"#fff",width:"2em",height:"2em"},this.deploymentStatus={},$scope.deploymentStates={"-1":"error",0:"reserved",1:"todo",2:"ready"},$scope.deploymentStateNames={"-1":"error",0:"proposed",1:"committed",2:"active"},$scope.deploymentIcons={error:"warning",reserved:"playlist_add",todo:"playlist_play",ready:"playlist_add_check"},this.createStatusBarData=function(){$scope.$evalAsync(function(){for(var id in $scope._deployments){$scope.binding[id]||($scope.binding[id]=!1),deployments.deploymentStatus[id]={error:0,total:0};for(var roleId in $scope._node_roles){var node_role=$scope._node_roles[roleId];if(node_role.deployment_id===id){var state=node_role.state;state===-1&&deployments.deploymentStatus[id].error++,deployments.deploymentStatus[id].total++}}}})},$scope.renameDeployment=function(event,id){$mdDialog.show({templateUrl:"views/dialogs/editdeploymentdialog.tmpl.html",parent:angular.element(document.body),targetEvent:event,controller:["locals","$mdDialog","$scope",function(locals,$mdDialog,$scope){$scope.id=locals.id,$scope.name=locals.name,$scope.description=locals.description,$scope.cancel=$mdDialog.cancel,$scope.hide=$mdDialog.hide}],locals:{id:id,name:$scope._deployments[id].name,description:$scope._deployments[id].description},clickOutsideToClose:!0,fullscreen:!1}).then(function(result){api("/api/v2/deployments/"+result.id,{method:"PUT",data:{name:result.name,description:result.description}}).then(function(resp){api.addDeployment(resp.data)},function(err){api.toast("Couldn't Create Deployment","deployment",err.data)})})},$scope.redeployDeployment=function(event,id){$scope.confirm(event,{title:"Redeploy All Nodes in Deployment",message:"Are you sure you want to redeploy "+$scope._deployments[id].name+"?",yesCallback:function(){api("/api/v2/deployments/"+id+"/redeploy",{method:"PUT"}).then(function(){$scope.updateMatrix($scope._deployments[id])},function(err){api.toast("Error Redeploying Deployment","deployment",err.data)})}})},$scope.deleteDeployment=function(event,id){$scope.confirm(event,{title:"Delete Deployment",message:"Are you sure you want to delete deployment "+$scope._deployments[id].name+"?",yesCallback:function(){api("/api/v2/deployments/"+id,{method:"DELETE"}).then(function(){api.remove("deployment",id)},function(err){api.toast("Error Deleting Deployment","deployment",err.data)})}})},$scope.proposeDeployment=function(id){"system"===$scope._deployments[id].name?$scope.confirm(event,{title:"WARNING: Proposing System Deployment",message:"Proposing the System Deployment may pause core functions. Continue?",yesCallback:function(){$scope.proposeDeploymentNoCheck(id)}}):$scope.proposeDeploymentNoCheck(id)},$scope.proposeDeploymentNoCheck=function(id){api("/api/v2/deployments/"+id+"/propose",{method:"PUT"}).then(function(resp){api.addDeployment(resp.data)},function(err){api.toast("Error Proposing Deployment "+$scope._deployments[id].name,"deployment",err.data)})},$scope.commitDeployment=function(id){api("/api/v2/deployments/"+id+"/commit",{method:"PUT"}).then(function(resp){api.addDeployment(resp.data)},function(err){api.toast("Error Committing Deployment "+$scope._deployments[id].name,"deployment",err.data)})},$scope.getRoles=function(deployment_id){var roles=[],active=[];for(var id in $scope._deployment_roles){var deployment_role=$scope._deployment_roles[id];deployment_role.deployment_id===deployment_id&&active.push(deployment_role.role_id+"")}for(var _id2 in $scope._roles)active.indexOf(_id2)===-1&&roles.push($scope._roles[_id2]);return roles},$scope.addRole=function(role_id,id){api("/api/v2/deployment_roles/",{method:"POST",data:{deployment_id:id,add_role:{role_id:role_id}}}).then(function(resp){api.addDeploymentRole(resp.data)},function(err){api.toast("Error Adding Deployment Role","deployment_role",err.data)})},$scope.createDeploymentPrompt=function(ev){var confirm=$mdDialog.prompt().title("Create Deployment").textContent("Enter the Name of the New Deployment").placeholder("Deployment Name").targetEvent(ev).ok("Create").cancel("Cancel");$mdDialog.show(confirm).then(function(result){api("/api/v2/deployments",{method:"POST",data:{name:result}}).then(function(resp){api.addDeployment(resp.data),deployments.createPieChartData(),deployments.createStatusBarData()},function(err){api.toast("Couldn't Create Deployment","deployment",err.data)})})},$scope.setBindRole=function(deployment_id,role_id){$scope.bindRoles[deployment_id]={role_id:role_id,roles:{}};for(var id in $scope._node_roles){var node_role=$scope._node_roles[id];node_role.role_id===role_id&&node_role.deployment_id===deployment_id&&($scope.bindRoles[deployment_id].roles[node_role.node_id]=node_role)}},$scope.matrixUpdateLoop=function(){deployments.getMatrixData(),$timeout.cancel($scope.updateInterval),$scope.updateInterval=$timeout($scope.matrixUpdateLoop,5e3)},$scope.matrixUpdateLoop(),$scope.$on("$destroy",function(){$timeout.cancel($scope.updateInterval)}),$scope.bindNodeRole=function(deployment_id,role_id,node_id){api("/api/v2/node_roles/",{method:"POST",data:{node_id:node_id,deployment_id:deployment_id,role_id:role_id}}).then(function(resp){api.addNodeRole(resp.data),$scope.setBindRole(deployment_id,role_id)},function(err){api.toast("Error Adding Node Role","node_role",err.data)})},$scope.destroyNodeRole=function(node_role_id){var node_role=$scope._node_roles[node_role_id],deployment_id=node_role.deployment_id,role_id=node_role.role_id;$scope.confirm(event,{title:"Destroy Node Role",message:"Are you sure you want to destroy this node role?",yesCallback:function(){api("/api/v2/node_roles/"+node_role_id,{method:"DELETE"}).then(function(){api.remove("node_role",node_role_id),$scope.setBindRole(deployment_id,role_id)})}})},$scope.bindRoles={},$scope.binding={},$scope.$on("$destroy",$scope.$on("node_rolesDone",deployments.createStatusBarData)),Object.keys($scope._node_roles).length&&this.createStatusBarData()}])}()}),require.register("js/dhcp.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("DHCPCtrl",["$scope",function($scope){$scope.$emit("title","DHCP Subnets"),$scope.expand={},$scope.optionMap={0:"Pad",1:"Subnet Mask",2:"Time Offset (deprecated)",3:"Router",4:"Time Server",5:"Name Server",6:"Domain Name Server",7:"Log Server",8:"Quote Server",9:"LPR Server",10:"Impress Server",11:"Resource Location Server",12:"Host Name",13:"Boot File Size",14:"Merit Dump File",15:"Domain Name",16:"Swap Server",17:"Root Path",18:"Extensions Path",19:"IP Forwarding enable/disable",20:"Non-local Source Routing enable/disable",21:"Policy Filter",22:"Maximum Datagram Reassembly Size",23:"Default IP Time-to-live",24:"Path MTU Aging Timeout",25:"Path MTU Plateau Table",26:"Interface MTU",27:"All Subnets are Local",28:"Broadcast Address",29:"Perform Mask Discovery",30:"Mask supplier",31:"Perform router discovery",32:"Router solicitation address",33:"Static routing table",34:"Trailer encapsulation",35:"ARP cache timeout",36:"Ethernet encapsulation",37:"Default TCP TTL",38:"TCP keepalive interval",39:"TCP keepalive garbage",40:"Network Information Service Domain",41:"Network Information Servers",42:"NTP servers",43:"Vendor specific information",44:"NetBIOS over TCP/IP name server",45:"NetBIOS over TCP/IP Datagram Distribution Server",46:"NetBIOS over TCP/IP Node Type",47:"NetBIOS over TCP/IP Scope",48:"X Window System Font Server",49:"X Window System Display Manager",50:"Requested IP Address",51:"IP address lease time",52:"Option overload",53:"DHCP message type",54:"Server identifier",55:"Parameter request list",56:"Message",57:"Maximum DHCP message size",58:"Renew time value",59:"Rebinding time value",60:"Class-identifier",61:"Client-identifier",62:"to 255  NetWare/IP Domain Name",63:"NetWare/IP information",64:"Network Information Service+ Domain",65:"Network Information Service+ Servers",66:"TFTP server name",67:"Bootfile name",68:"Mobile IP Home Agent",69:"Simple Mail Transport Protocol Server",70:"Post Office Protocol Server",71:"Network News Transport Protocol Server",72:"Default World Wide Web Server",73:"Default Finger Server",74:"Default Internet Relay Chat Server",75:"StreetTalk Server",76:"StreetTalk Directory Assistance Server",77:"User Class Information",78:"SLP Directory Agent",80:"Rapid Commit",81:"FQDN, Fully Qualified Domain Name",82:"Relay Agent Information",83:"Internet Storage Name Service",85:"NDS servers",86:"NDS tree name",87:"NDS context",88:"BCMCS Controller Domain Name list",89:"BCMCS Controller IPv4 address list",90:"Authentication",91:"client-last-transaction-time",92:"associated-ip",93:"Client System Architecture Type",94:"Client Network Interface Identifier",95:"LDAP, Lightweight Directory Access Protocol",97:"Client Machine Identifier",98:"Open Group's User Authentication",99:"GEOCONF_CIVIC",100:"IEEE 1003.1 TZ String",101:"Reference to the TZ Database",112:"NetInfo Parent Server Address",113:"NetInfo Parent Server Tag",114:"URL",116:"Auto-Configure",117:"Name Service Search",118:"Subnet Selection",119:"DNS domain search list",120:"SIP Servers DHCP Option",121:"Classless Static Route Option",122:"CCC, CableLabs Client Configuration",123:"GeoConf",124:"Vendor-Identifying Vendor Class",125:"Vendor-Identifying Vendor-Specific",128:"TFTP Server IP address",129:"Call Server IP address",130:"Discrimination string",131:"Remote statistics server IP address",132:"802.1P VLAN ID",133:"802.1Q L2 Priority",134:"Diffserv Code Point",135:"HTTP Proxy for phone-specific applications",136:"PANA Authentication Agent",137:"LoST Server",138:"CAPWAP Access Controller addresses",139:"OPTION-IPv4_Address-MoS",140:"OPTION-IPv4_FQDN-MoS",141:"SIP UA Configuration Service Domains",142:"OPTION-IPv4_Address-ANDSF",143:"OPTION-IPv6_Address-ANDSF",150:"TFTP server address / Etherboot GRUB configuration path name",151:"status-code",152:"base-time",153:"start-time-of-state",154:"query-start-time",155:"query-end-time",156:"dhcp-state",157:"data-source",175:"Etherboot",176:"IP Telephone",177:"Etherboot. PacketCable and CableHome",208:"pxelinux.magic (string) = F1:00:74:7E (241.0.116.126)",209:"pxelinux.configfile (text)",210:"pxelinux.pathprefix (text)",211:"pxelinux.reboottime (unsigned integer 32 bits)",212:"OPTION_6RD",213:"OPTION_V4_ACCESS_DOMAIN",220:"Subnet Allocation",221:"Virtual Subnet Selection",254:"Private use",255:"End."}}])}()}),require.register("js/dialog.js",function(exports,require,module){"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};!function(){angular.module("app").controller("DialogController",["$scope","$rootScope","$mdDialog","locals","api","$mdToast","debounce","$location","localStorageService",function($scope,$rootScope,$mdDialog,locals,api,$mdToast,debounce,$location,localStorageService){$scope.locals=locals,locals.api=api,$scope.icons=$rootScope.icons,$scope.fixCaps=function(tenant){var caps=locals.user.caps[tenant.id].caps;for(var i in caps){var cap=caps[i];"object"===("undefined"==typeof cap?"undefined":_typeof(cap))&&(caps[i]=cap.id)}locals.user.caps[tenant.id].caps=caps.reduce(function(arr,id){return arr.includes(id)||arr.push(id),arr},[])},$scope.providers=function(){var providers=[];for(var id in locals._providers){var provider=locals._providers[id];Object.keys(provider.auth_details).length&&providers.push(provider)}return providers}(),$scope.loadProvider=function(name){return function(editor){editor.setValue(JSON.stringify(locals.provider.auth_details[name],0,"  "),-1),editor.getSession().on("change",function(){try{locals.provider.auth_details[name]=JSON.parse(editor.getValue())}catch(e){}})}},$scope.loadBarclamp=function(editor){editor.setValue(JSON.stringify(locals.barclamp.cfg_data,0,"  "),-1),editor.getSession().on("change",function(){try{locals.barclamp.cfg_data=JSON.parse(editor.getValue())}catch(e){}})},$scope.loadProfile=function(name){return function(editor){editor.setValue(locals.profile.values[name].value,-1),editor.getSession().on("change",function(){try{locals.profile.values[name].value=editor.getValue()}catch(e){}})}},$scope.providerMap=function(){var pm={};for(var i in locals._providers){var provider=locals._providers[i];pm[provider.name]=provider,"MetalProvider"!==provider.type&&""!==provider.type}return pm}(),$scope.hide=function(){$mdDialog.hide()},$scope.cancel=function(){$mdDialog.cancel()},$scope.parse=function(data,bool){try{var a=JSON.parse(data);return bool?"undefined"!=typeof a:a}catch(e){return!1}},this.updateBarclamp=function(){var config=$scope.locals.barclamp.cfg_data;return config?config.barclamp.name?(api.saveBarclamp(config),void $mdDialog.hide()):void api.toast("Name is required","barclamp",{message:"dialog.js updateBarclamp"}):void api.toast("Bad JSON","barclamp",{message:"dialog.js updateBarclamp"})},this.updateNode=function(){var payload={name:locals.name1,description:locals.description1,profiles:locals.profiles1};api("/api/v2/nodes/"+locals.id,{method:"PUT",data:payload}).then(function(resp){api.toast("Updated Node "+locals.node.name),api.addNode(resp.data),$mdDialog.hide()},function(err){api.toast("Error Updating Node","node",err.data)})},this.editNodesInHelper=function(){var provider=locals.providers[locals.provider].name,hints=$scope.providerMap[provider].auth_details["provider-create-hint"];if(null===hints){var ptype=$scope.providerMap[provider].type;hints=$rootScope.providerTemplates[ptype]["provider-create-hint"]["default"]}var payload={name:locals.base_name+"."+provider+".neode.org",description:"created by rebar",provider:provider,profiles:locals.profiles,deployment_id:locals.deployment_id,hints:{"use-proxy":!1,"use-ntp":!1,"use-dns":!1,"use-logging":!1,"provider-create-hint":hints}};payload.hints["provider-create-hint"].hostname=locals.base_name,localStorageService.add("api_helper_payload",JSON.stringify(payload,null,"  ")),localStorageService.add("api_helper_method","post"),localStorageService.add("api_helper_route","/api/v2/nodes/"),$mdDialog.hide(),$location.path("/api_helper")},this.addNodes=function(){var times=Array.apply(null,{length:locals.number}).map(Number.call,Number),provider=void 0;locals.provider=parseInt(locals.provider),locals._providers.forEach(function(obj){obj.id===locals.provider&&(provider=obj.name)});var hints=$scope.providerMap[provider].auth_details["provider-create-hint"];if(null===hints){var ptype=$scope.providerMap[provider].type;hints=$rootScope.providerTemplates[ptype]["provider-create-hint"]["default"]}times.forEach(function(i){var payload={name:locals.base_name+"-"+i+"."+provider+".neode.org",description:"created by rebar",provider:provider,profiles:locals.profiles,deployment_id:locals.deployment_id,hints:{"use-proxy":!1,"use-ntp":!1,"use-dns":!1,"use-logging":!1,"provider-create-hint":hints}};payload.hints["provider-create-hint"].hostname=locals.base_name+"-"+i,api("/api/v2/nodes",{method:"POST",data:payload}).then(function(resp){api.addNode(resp.data)},function(err){api.toast("Error updating node","node",err.data)})}),api.toast("Adding "+locals.number+" node"+(1!==locals.number?"s":"")),$mdDialog.hide()},this.addProvider=function(){api("/api/v2/providers",{method:"POST",data:locals.provider}).then(function(resp){api.addProvider(resp.data)},function(err){api.toast("Error Adding Provider","provider",err.data)}),$mdDialog.hide()},this.addNetwork=function(){locals.network.name=locals.network.category+"-"+locals.network.group,api("/api/v2/networks",{method:"POST",data:locals.network}).then(function(resp){api.addNetwork(resp.data)},function(err){api.toast("Error Adding Network","network",err.data)}),$mdDialog.hide()},this.addDNSRecord=function(){var zone=locals.zone;api("/dns/zones/"+zone.name,{method:"PATCH",data:locals.record}).then(api.getHealth,api.getHealth),$mdDialog.hide()},this.createTemplate=function(){var template=$scope.locals.template,path=void 0,method=void 0,data=void 0;locals.editing?(path="/provisioner/templates/"+template.UUID,method="PATCH",data=[{op:"replace",path:"/Contents",value:template.Contents}]):(path="/provisioner/templates",method="POST",data=template),api(path,{method:method,data:data}).then(api.getHealth,api.getHealth),$mdDialog.hide()},$scope.selectedFile="",$scope.selectFile=function(){document.getElementById("file").click()},$scope.updateTemplateContents=function(){var fileElem=document.getElementById("file");$scope.selectedFile="";var f=fileElem.files[0],r=new FileReader;r.onloadend=function(e){var data=e.target.result;locals.template.Contents=data},r.readAsBinaryString(f),fileElem.value=""},this.createTenant=function(){var tenant=$scope.locals.tenant,path=void 0,method=void 0,data=void 0;locals.editing?(path="/api/v2/tenants/"+tenant.uuid,method="PATCH",data=[{op:"replace",path:"/name",value:tenant.name},{op:"replace",path:"/description",value:tenant.description},{op:"replace",path:"/parent_id",value:tenant.parent_id}]):(path="/tenants",method="POST",data=angular.copy(tenant)),api(path,{method:method,data:data}).then(function(){},function(err){api.toast("Error creating tenant","tenants",err.data)}),$mdDialog.hide()},this.createCapability=function(){var capability=$scope.locals.capability,path=void 0,method=void 0,data=void 0;locals.editing?(path="/api/v2/capabilities/"+capability.id,method="PATCH",data=[{op:"replace",path:"/description",value:capability.description}]):(capability.includes=["USER_LOGIN"],capability.source="user-defined",path="/api/v2/capabilities",method="POST",data=angular.copy(capability)),api(path,{method:method,data:data}).then(function(){locals.editing||(api.toast("Added capability "+capability.name),api.getHealth())},function(err){api.toast("Error creating capability","capabilities",err.data)}),$mdDialog.hide()},this.createUser=function(){var user=$scope.locals.user,path=void 0,method=void 0,data=void 0;return user.password1.length<6?void api.toast("Password must be at least 6 characters","user"):user.password1!==user.password2?void api.toast("Passwords must match","user"):(user.current_tenant_id||(user.current_tenant_id=user.tenant_id),data=user,locals.editing?(path="/api/v2/users/"+user.id,method="PUT",""!==user.password1&&(data.digest=!0,data.password=user.password1)):(path="/api/v2/users",method="POST",""!==user.password1&&(data.digest=!0,data.password=user.password1),data=user),api(path,{method:method,data:data}).then(api.getUsers,api.getUsers),void $mdDialog.hide())},this.createBootEnv=function(){var env=$scope.locals.env,path=void 0,method=void 0,data=void 0;if(locals.editing){path="/provisioner/bootenvs/"+env.Name,method="PATCH",data=[];var original=locals.original;for(var key in env)JSON.stringify(env[key])!==JSON.stringify(original[key])&&data.push({op:"replace",path:"/"+key,value:env[key]})}else path="/provisioner/bootenvs",method="POST",data=env;api(path,{method:method,data:data}).then(api.getHealth,api.getHealth),$mdDialog.hide()},this.profileSelectChanged=function(values,old_key,new_key){var d=values[old_key];values[new_key]=d,void 0!==_typeof(locals.attribs[new_key]["default"])&&(values[new_key].value=JSON.stringify(locals.attribs[new_key]["default"].value)),old_key!==new_key&&delete values[old_key]},this.profileClearData=function(values,key){return delete values[key],!0},this.profileNewValue=function(values){return values["new"]={name:"new",value:""},!0},this.createProfile=function(){var profile=$scope.locals.profile,path=void 0,method=void 0,data=void 0,newprofile={};newprofile.name=profile.name,newprofile.values={};for(var key in profile.values)newprofile.values[key]=JSON.parse(profile.values[key].value);if(locals.editing){path="/api/v2/profiles/"+newprofile.name,method="PATCH",data=[];var original=locals.original;for(var _key in newprofile)JSON.stringify(newprofile[_key])!==JSON.stringify(original[_key])&&data.push({op:"replace",path:"/"+_key,value:newprofile[_key]})}else path="/api/v2/profiles",method="POST",data=newprofile;api(path,{method:method,data:data}).then(function(resp){api.addProfile(resp.data),api.getHealth()},api.getHealth),$mdDialog.hide()},this.updateUserCaps=function(){var user=locals.user,user_id=user.id,original=locals.original,diff=[],_loop=function(tenant_id){var tenant=user.caps[tenant_id].caps,origTenant=original.caps[tenant_id].caps,added=tenant.filter(function(i){return origTenant.indexOf(i)<0}),removed=origTenant.filter(function(i){return tenant.indexOf(i)<0});for(var _i in added)diff.push({method:"POST",data:{tenant_id:tenant_id,user_id:user_id,capability_id:added[_i]}});for(var _i2 in removed)diff.push({method:"DELETE",params:{tenant_id:tenant_id,user_id:user_id,capability_id:removed[_i2]}})};for(var tenant_id in user.caps)_loop(tenant_id);for(var i in diff){var config=diff[i];api("/api/v2/user_tenant_capabilities",config).then(debounce(locals.update,500,!0))}$mdDialog.hide()},this.editAttrib=function(target){var id=locals.id,value=void 0;try{value=JSON.parse(locals.value)}catch(e){return}var obj={value:value};obj[target.obj]=target.id;var propose_url="";switch(target.obj){case"node_role_id":propose_url="/api/v2/node_roles/"+target.id+"/propose";break;case"deployment_role_id":propose_url="/api/v2/deployment_roles/"+target.id+"/propose"}api(propose_url,{method:"PUT"}).then(function(){api("/api/v2/attribs/"+id,{method:"PUT",data:obj}).then(function(resp){var data=resp.data;api.toast("Updated Attrib!"),locals.attrib.value=data.value,"deployment_role_id"===target.obj&&($rootScope._deployment_roles[target.id].proposed=!0)},function(err){api.toast("Error updating attrib","attrib",err.data)})},function(err){api.toast("Error proposing target object",target.obj,err.data)}),$mdDialog.hide()}}])}()}),require.register("js/dns.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("DNSCtrl",["$scope","api","$mdDialog","$mdMedia",function($scope,api,$mdDialog,$mdMedia){$scope.$emit("title","DNS Zones");var dns=this;this.selected=[],$scope.deleteRecords=function(zone){$scope.confirm(event,{title:"Remove Records",message:"Are you sure you want to remove selected records?",yesCallback:function(){dns.selected.forEach(function(record){record.changetype="REMOVE",api("/dns/zones/"+zone.name,{method:"PATCH",data:record}).then(api.getHealth,api.getHealth)}),dns.selected=[]}})},$scope.add=function(ev,zone){var useFullScreen=$mdMedia("sm")||$mdMedia("xs");$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/adddnsrecorddialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{zone:zone,record:{changetype:"ADD",name:"",content:"",type:""}},clickOutsideToClose:!0,fullscreen:useFullScreen})}}])}()}),require.register("js/engine.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("EngineCtrl",["$scope",function($scope){$scope.$emit("title","Rule Engine")}])}()}),require.register("js/graphs.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("GraphsCtrl",["$scope","$location","debounce","$routeParams","$mdMedia","$mdDialog","$timeout","api",function($scope,$location,debounce,$routeParams,$mdMedia,$mdDialog,$timeout,api){$scope.$emit("title","Graphs"),$scope.graphData={},$scope.graphOptions={},$scope.graphType="node_roles",$scope.graphDeployment=0,$scope.graphNode=0,$scope.graphRole=0,$scope.graphBarclamp=0,$scope.graphHLayout=!1,$scope.graphLayoutOptions={hierarchical:{enabled:!0,levelSeparation:150,direction:"UD",sortMethod:"directed"}},$scope.getGraph=function(){$scope.hasGraph=-1;var payload={};switch($scope.graphType){case"node_roles":$scope.graphDeployment&&(payload.deployment_id=$scope.graphDeployment),$scope.graphRole&&(payload.role_id=$scope.graphRole),$scope.graphNode&&(payload.node_id=$scope.graphNode);break;case"roles":$scope.graphRole&&(payload.role_id=$scope.graphRole),$scope.graphBarclamp&&(payload.barclamp_id=$scope.graphBarclamp)}$scope.graphDeployment&&api("/api/v2/"+$scope.graphType+"/graph",{data:payload}).then(function(resp){var obj=resp.data,parsedData=vis.network.convertDot(obj.string);$scope.graphData={nodes:parsedData.nodes,edges:parsedData.edges},$scope.graphOptions=parsedData.options,$scope.graphHLayout&&($scope.graphOptions.layout=$scope.graphLayoutOptions),$scope.hasGraph=1},function(err){$scope.hasGraph=0,api.toast("Error Getting Graph Data","node_role",err.data)})};var deregister=$scope.$watchCollection("graphHLayout",function(val){val?$scope.graphOptions.layout=$scope.graphLayoutOptions:$scope.graphOptions.layout={hierarchical:{enabled:!1}}});$scope.$on("$destroy",deregister),$scope.getGraph()}])}()}),require.register("js/helper.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("ApiHelperCtrl",["$scope","api","localStorageService",function($scope,api,localStorageService){$scope.$emit("title","API Helper"),$scope.method=localStorageService.get("api_helper_method")||"get",$scope.payload=localStorageService.get("api_helper_payload")||"{}",$scope.route=localStorageService.get("api_helper_route")||"",$scope["class"]={},$scope.parse=function(data){try{var a=JSON.parse(data);return localStorageService.add("api_helper_payload",data),localStorageService.add("api_helper_method",$scope.method),localStorageService.add("api_helper_route",$scope.route),a}catch(e){return!1}};var deregister=$scope.$watchCollection("method",function(method){"patch"===method&&"{}"===$scope.payload&&($scope.payload='[\n  {"op": "replace/add/remove", "path": "/attrName", "value": "foo" }\n]')});$scope.$on("$destroy",deregister),$scope.testApi=function(){api($scope.route,{method:$scope.method,data:JSON.parse($scope.payload)}).then(function(resp){$scope["class"]={success:!0},$scope.output=JSON.stringify(resp.data,null,"  ")},function(err){$scope["class"]={error:!0},$scope.output=JSON.stringify(err&&err.data||err,null,"  ")||err.data})},$scope.clearOutput=function(){$scope.output="",$scope["class"]={}}}])}()}),require.register("js/logging.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("LoggingCtrl",["$scope","api","$mdDialog","$mdMedia","localStorageService",function($scope,api,$mdDialog,$mdMedia,localStorageService){$scope.$emit("title","Alert History"),$scope.query={page:1,limit:10},$scope.myOrder="-date",$scope.showInfo=function(ev,err){$mdDialog.show({template:'<md-dialog aria-label="Error">  <md-toolbar>    <div class="md-toolbar-tools">      <h2>'+err.type+" - "+err.message+'</h2>    </div>  </md-toolbar>  <md-dialog-content>    <div class="md-dialog-content">      <b>Error:&nbsp;</b>      <pre>'+JSON.stringify(err.err,null,"  ")+"</pre>      <b>Stack:</b>      <pre>"+err.stack+"</pre>    </div>  </md-dialog-content></md-dialog>",parent:angular.element(document.body),targetEvent:ev,clickOutsideToClose:!0})},$scope.remove=function(err){api.errors.splice(api.errors.indexOf(err),1),localStorageService.add("errors",api.errors)},$scope.method="get",$scope.payload="{}",$scope.route="",$scope["class"]={},$scope.parse=function(data){try{return JSON.parse(data);
}catch(e){return!1}},$scope.testApi=function(){api($scope.route,{method:$scope.method,data:JSON.parse($scope.payload)}).then(function(resp){$scope["class"]={success:!0},$scope.output=JSON.stringify(resp.data,null,"  ")},function(err){$scope["class"]={error:!0},$scope.output=JSON.stringify(err&&err.data||err,null,"  ")||err.data})},$scope.clearOutput=function(){$scope.output="",$scope["class"]={}}}])}()}),require.register("js/login.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("LoginCtrl",["$scope","api","$location","localStorageService","$http","$cookies","debounce","$mdMedia","$mdDialog","$mdToast",function($scope,api,$location,localStorageService,$http,$cookies,debounce,$mdMedia,$mdDialog,$mdToast){$scope.$emit("title","Login"),this.credentials={username:localStorageService.get("username")||"",password:localStorageService.get("password")||""},$scope.acceptedEula=localStorageService.get("accept_eula")||!1,$scope.acceptEula=function(ev){$scope.acceptedEula?(localStorageService.add("accept_eula",!1),$scope.acceptedEula=!1):$mdDialog.show({controller:"LoginCtrl",templateUrl:"views/dialogs/accepteuladialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,clickOutsideToClose:!1}).then(function(res){localStorageService.add("accept_eula",res),$scope.acceptedEula=localStorageService.get("accept_eula")},function(){})},$scope.answerEula=function(val){$mdDialog.hide(val)},this.hosts=localStorageService.get("hosts")||[],this.host=$scope.host;var params=$location.search();params.host&&(this.host=params.host);var login=this;this.testHost=function(host){return host?($scope.$emit("host",host),void api("/api/license").then(function(resp){var data=resp.data;login.state=1,$scope.eula=data.eula,$cookies.put("host",login.host),$scope.$emit("host",host);var hosts=localStorageService.get("hosts")||[];hosts.indexOf(host)<0&&(login.hosts=hosts.concat(host),localStorageService.add("hosts",login.hosts));var token=$cookies.get("DrAuthToken");"undefined"!=typeof token?api("/api/v2/users/").then(function(){var username=$cookies.get("DrAuthUser");localStorageService.add("username",username),$scope.$emit("login",{username:username}),$scope.$emit("startUpdating"),$location.path($scope.lastPath)},function(){$cookies.remove("DrAuthUser"),$cookies.remove("DrAuthToken"),$cookies.remove("_rebar_session")}):localStorageService.get("username")&&localStorageService.get("password")&&login.signIn()},function(){login.state=-1})):void(login.state=-1)},this.showEulaDialog=function(ev,node){$scope.node=node;var useFullScreen=$mdMedia("sm")||$mdMedia("xs");$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/euladialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{host:$scope.host,eula:$scope.eula},clickOutsideToClose:!0,fullscreen:useFullScreen})},$scope.delayTest=function(){login.state=0,$scope.eula=void 0,login.testHost(login.host)};var deregister=$scope.$watchCollection("login.host",$scope.delayTest);$scope.$on("$destroy",deregister),this.signIn=function(){return $scope.acceptedEula?(console.log("attempting to sign in"),localStorageService.add("username",login.credentials.username),localStorageService.add("password",login.credentials.password),void api("/api/v2/digest",{method:"HEAD",headers:{"Content-Type":"application/json"},params:{rackn:"ux v"+window.version}}).then(function(){login.getUser()},function(response){console.log("error",response),$mdToast.show($mdToast.simple().textContent(response.status+" - "+response.statusText).position("top left").hideDelay(3e3))})):void api.toast("Please Accept the Eula")},this.getUser=function(){api("/api/v2/digest",{method:"GET"}).then(function(resp){$scope.$emit("login",resp.data),$scope.$emit("startUpdating"),$location.path($scope.lastPath)})}}])}()}),require.register("js/networks.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("NetworksCtrl",["$scope","api","$mdDialog","$mdMedia","$routeParams","$location",function($scope,api,$mdDialog,$mdMedia,$routeParams,$location){function updateNetwork(){$scope.editing||($scope.network=$scope._networks[$scope.id],$scope.network?($scope.hasRanges===-1&&api("/api/v2/networks/"+$scope.network.id+"/network_ranges").then(function(resp){var obj=resp.data;obj.forEach(function(range){$scope._ranges[range.id]=range}),$scope.ranges=angular.copy($scope._ranges),$scope.hasRanges=1},function(){$scope.hasRanges=0}),$scope.hasRouter===-1&&api("/api/v2/network_routers/"+$scope.network.id).then(function(resp){var obj=resp.data;$scope._router=obj,$scope.router=angular.copy($scope._router),$scope.hasRouter=1},function(){$scope._router={address:"0.0.0.0/32",pref:"65536",add_router:!0},$scope.router={address:"Not Set",pref:"Not Set"},$scope.hasRouter=1}),hasCallback||(hasCallback=!0,$scope.$on("network"+$scope.network.id+"Done",updateNetwork))):$location.path("/networks"))}$scope.$emit("title","Networks"),$scope.myOrder="name";var networks=this;this.selected=[],this.order="name",this.getNetworks=function(){var networks=[];for(var id in $scope._networks)networks.push($scope._networks[id]);return networks},this.deleteSelected=function(event){$scope.confirm(event,{title:"Remove Networks",message:"Are you sure you want to remove selected networks?",yesCallback:function(){networks.selected.forEach(function(network){api("/api/v2/networks/"+network.id,{method:"DELETE"}).then(function(){console.log("network deleted")}).then(function(){api.remove("network",network.id)})}),networks.selected=[]}})},this.showAddNetworkDialog=function(ev){var useFullScreen=$mdMedia("sm")||$mdMedia("xs");$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/addnetworkdialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{network:{name:"",description:"",category:"general",group:"default",deployment_id:1,v6prefix:"auto",use_vlan:!1,use_bridge:!1,use_team:!1,vlan:null,bridge:null,team_mode:null,conduit:"10g1",pbr:null},_deployments:$scope._deployments},clickOutsideToClose:!0,fullscreen:useFullScreen})},$scope.assignNetworks=function(arr,deployment_id){arr.forEach(function(network){api("/api/v2/networks/"+network.id,{method:"PUT",data:{deployment_id:deployment_id}}).then(function(resp){api.addNetwork(resp.data)})})},$scope.assignNetworksToTenant=function(arr,tenant_id){arr.forEach(function(network){api("/api/v2/networks/"+network.id,{method:"PUT",data:{tenant_id:tenant_id}}).then(function(resp){api.addNetwork(resp.data)})})},$scope["delete"]=function(event){$scope.confirm(event,{title:"Remove Network",message:"Are you sure you want to remove this network?",yesCallback:function(){api("/api/v2/networks/"+$scope.id,{method:"DELETE"}).then(function(){console.log("network deleted")}).then(function(){api.remove("network",$scope.id),$location.path("/networks")})}})},$scope.saveNetwork=function(){if($scope.editing){var data=angular.copy($scope.network);data.use_vlan||delete data.vlan,data.use_bridge||delete data.bridge,data.use_team||delete data.team_mode,api("/api/v2/networks/"+$scope.id,{method:"PUT",data:data}).then(function(resp){api.addNetwork(resp.data)},function(err){api.toast("Couldn't Save Network","networks",err.data)}),$scope.stopEditing()}},$scope.stopEditing=function(){$scope.editing&&($scope.network=$scope._networks[$scope.id],$scope.editing=!1)},$scope.startEditing=function(){$scope.editing||($scope.editing=!0,$scope.network=angular.copy($scope._networks[$scope.id]))},$scope.saveNetworkRanges=function(){if($scope.editingRanges){var data=angular.copy($scope.ranges);Object.keys(data).forEach(function(id){var range=data[id],original=$scope._ranges[id];JSON.stringify(range)!==JSON.stringify(original)&&api("/api/v2/network_ranges/"+range.id,{method:"PUT",data:range}).then(function(resp){var obj=resp.data;$scope._ranges[obj.id]=obj,$scope.ranges[obj.id]=angular.copy(obj)},function(err){api.toast("Couldn't Save Network Range","network_ranges",err.data)})}),$scope.stopEditingRanges()}},$scope.deleteRange=function(id){$scope.confirm(event,{title:"Remove Network Range",message:"Are you sure you want to remove network range "+$scope._ranges[id].name+"?",yesCallback:function(){api("/api/v2/networks/"+$scope.id+"/network_ranges/"+id,{method:"DELETE"}).then(function(){delete $scope._ranges[id],delete $scope.ranges[id]})}})},$scope.addRange=function(){api("/api/v2/networks/"+$scope.id+"/network_ranges/",{method:"POST",data:{network_id:$scope.id,name:"Default",first:"10.10.10.1/24",last:"10.10.10.254/24"}}).then(function(resp){var obj=resp.data;$scope._ranges[obj.id]=obj,$scope.ranges[obj.id]=angular.copy(obj)},function(err){api.toast("Couldn't Add Network Range","network_ranges",err.data)})},$scope.stopEditingRanges=function(){$scope.editingRanges&&($scope.ranges=$scope._ranges,$scope.editingRanges=!1)},$scope.startEditingRanges=function(){$scope.editingRanges||($scope.editingRanges=!0,$scope.ranges=angular.copy($scope._ranges))},$scope.saveNetworkRouter=function(){if($scope.editingRouter){var data=angular.copy($scope.router),path="/api/v2/network_routers/"+$scope.id,method="PUT";data.add_router&&(path="/api/v2/networks/"+$scope.id+"/network_routers",method="POST"),api(path,{method:method,data:data}).then(function(resp){var obj=resp.data;$scope._router=obj,$scope.router=angular.copy(obj)},function(err){api.toast("Couldn't Save Network Router","network_routers",err.data)}),$scope.stopEditingRouter()}},$scope.stopEditingRouter=function(){$scope.editingRouter&&($scope.router=$scope._router,$scope.editingRouter=!1)},$scope.startEditingRouter=function(){$scope.editingRouter||($scope.editingRouter=!0,$scope.router=angular.copy($scope._router))},$scope.id=$routeParams.id,$scope.network={},$scope.editing=!1,$scope.hasRanges=-1,$scope.ranges={},$scope._ranges={},$scope.editingRanges=!1,$scope.hasRouter=-1,$scope.router={},$scope._router={},$scope.editingRouter=!1;var hasCallback=!1;Object.keys($scope._networks).length?updateNetwork():$scope.$on("networksDone",function(){"undefined"==typeof $scope._networks[$scope.id]?$location.path("/networks"):updateNetwork()})}])}()}),require.register("js/node_roles.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("NodeRolesCtrl",["$scope","$location","debounce","$routeParams","$mdMedia","$mdDialog","$timeout","localStorageService","api",function($scope,$location,debounce,$routeParams,$mdMedia,$mdDialog,$timeout,localStorageService,api){function updateNodeRole(){if(!$scope.editing)if($scope._node_roles[$scope.id]){$scope.node_role=$scope._node_roles[$scope.id],$scope.service=!!$scope._nodes[$scope.node_role.node_id]&&$scope._nodes[$scope.node_role.node_id].system;for(var id in $scope._deployment_roles){var dr=$scope._deployment_roles[id];if(dr.role_id===$scope.node_role.role_id&&dr.deployment_id===$scope.node_role.deployment_id){$scope.deployment_role_id=id;break}}$scope.hasAttrib===-1&&api("/api/v2/node_roles/"+$scope.node_role.id+"/attribs").then(function(resp){var obj=resp.data;$scope.attribs=obj,obj.forEach(function(attrib){attrib.len=JSON.stringify(attrib.value).length,attrib.preview=JSON.stringify(attrib.value,null,"  ").trim().replace(/[\s\n]/g,""),attrib.preview.length>73&&(attrib.preview=attrib.preview.substr(0,67)+"...")}),$scope.hasAttrib=1},function(){$scope.hasAttrib=0}),hasCallback||(hasCallback=!0,$scope.$on("node_role"+$scope.node_role.id+"Done",updateNodeRole))}else $location.path("/node_roles")}$scope.$emit("title","Node Roles"),$scope.query={page:1,limit:10};var node_roles=this;$scope.pollLog=5,$scope.myOrder="id",$scope.style={},$scope.top=0,$scope.updateScroll=function(){if($scope.id&&$("#runlog").position()){var top=$("#runlog").position().top-$("#runlog").height();$scope.top=top;var toolbar=$(".md-default:not(#runlog)");top<0?($scope.style={position:"fixed"},toolbar.css("width",$("#runlog").width()),toolbar.css("top",$("#toolbar").height())):($scope.style={},toolbar.css("width","auto"),toolbar.css("top","auto"))}};var deregister=$scope.$watchCollection("scroll",$scope.updateScroll);$scope.$on("$destroy",deregister),this.selected=[],$scope.editAttribInHelper=function(id){localStorageService.add("api_helper_method","get"),localStorageService.add("api_helper_route","/api/v2/attribs/"+id),$location.path("/api_helper")},$scope.getNodeRoles=function(){var roles=[];for(var id in $scope._node_roles){var node=$scope._nodes[$scope._node_roles[id].node_id];node&&"phantom"!==node.variant&&roles.push($scope._node_roles[id])}return roles},$scope.retry=function(){$scope.runlog="Retrying...",$scope.node_role.id&&api("/api/v2/node_roles/"+$scope.node_role.id+"/retry",{method:"PUT"}).then(function(resp){api.addNodeRole(resp.data),$scope.updateScroll()},function(err){api.toast("Error retrying node role","node_role",err.data)})},$scope.commit=function(){$scope.node_role.id&&api("/api/v2/node_roles/"+$scope.node_role.id+"/commit",{method:"PUT"}).then(function(resp){api.addNodeRole(resp.data),$scope.updateScroll()},function(err){api.toast("Error committing node role","node_role",err.data)})},$scope.destroySelected=function(){$scope.confirm(event,{title:"Destroy Node Roles",message:"Are you sure you want to destroy the selected node roles?",yesCallback:function(){node_roles.selected.forEach(function(node_role){node_role.id&&api("/api/v2/node_roles/"+node_role.id,{method:"DELETE"}).then(function(){api.remove("node_role",node_role.id)}),node_roles.selected=[]})}})},$scope.retrySelected=function(arr){var roles=node_roles.selected;arr&&(roles=arr),roles.forEach(function(node_role){node_role.id&&api("/api/v2/node_roles/"+node_role.id+"/retry",{method:"PUT"}),arr||(node_roles.selected=[])})},$scope.destroy=function(){$scope.confirm(event,{title:"Destroy Node Role",message:"Are you sure you want to destroy this node role?",yesCallback:function(){$scope.node_role.id&&api("/api/v2/node_roles/"+$scope.node_role.id,{method:"DELETE"}).then(function(){api.remove("node_role",$scope.node_role.id),$location.path("/node_roles")})}})},$scope.supported=!1,$scope.onCopy=function(succ){succ?api.toast("Copied Runlog to Clipboard"):api.toast("Copy Runlog to Clipboard Failed")},$scope.id=$routeParams.id,$scope.target={obj:"node_role_id",id:$routeParams.id},$scope.node_role={},$scope.hasAttrib=-1,$scope.attribs=[],$scope.editing=!1,$scope.service=!1,$scope.deployment_role_id=-1,$scope.helplink="http://digital-rebar.readthedocs.io/en/latest/deployment/troubleshooting/roles";var hasCallback=!1;$scope.runlog="Retrieving...",$scope.getRunlog=function(id){return api("/api/v2/node_roles/"+id,{headers:{"x-return-attributes":'["runlog"]'}}).then(function(resp){$scope.runlog=resp.data.runlog||"No Log"},function(err){$scope.runlog="Error Getting Run Log: "+err.data})},Object.keys($scope._node_roles).length?updateNodeRole():$scope.$on("node_rolesDone",updateNodeRole),$scope.getApiUpdate=function(){!$scope.editing&&$scope.node_role&&$scope.id&&api("/api/v2/node_roles/"+$scope.id).then(function(resp){$scope.runlog=resp.data.runlog,api.addNodeRole(resp.data),$scope.updateInterval=$timeout($scope.getApiUpdate,1e3*$scope.pollLog)})},$scope.changeRate=function(rate){$scope.pollLog=rate,$timeout.cancel($scope.updateInterval),$scope.getApiUpdate()},$scope.getApiUpdate(),$scope.$on("$routeChangeStart",function(){$timeout.cancel($scope.updateInterval)})}])}()}),require.register("js/nodes.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("NodesCtrl",["$scope","$location","debounce","$routeParams","$mdMedia","$mdDialog","api",function($scope,$location,debounce,$routeParams,$mdMedia,$mdDialog,api){function updateNode(){$scope.editing||($scope.node=$scope._nodes[$scope.id],$scope.node?(api("/api/v2/nodes/"+$scope.node.id+"/power").then(function(resp){var obj=resp.data;for(var i in obj)["status","on?"].includes(obj[i])&&obj.splice(i,1);$scope.power=obj}),api("/api/v2/nodes/"+$scope.node.id+"/network_allocations").then(function(resp){var obj=resp.data;$scope.nics={};for(var i in obj)$scope.nics[obj[i].network_id]||($scope.nics[obj[i].network_id]=[]),$scope.nics[obj[i].network_id].push(obj[i])}),$scope.hasAttrib===-1&&api("/api/v2/nodes/"+$scope.node.id+"/attribs").then(function(resp){var obj=resp.data;$scope.attribs=obj,obj.forEach(function(attrib){var blob=JSON.stringify(attrib.value);attrib.len=blob.length,attrib.preview=JSON.stringify(attrib.value,null,"  ").trim().replace(/[\s\n]/g,""),"undefined"==typeof attrib.value&&(attrib.value="Not Set"),attrib.preview.length>73&&(attrib.preview=attrib.preview.substr(0,67)+"..."),"ipmi-address"===attrib.name&&($scope.bmc=attrib.value),"chassis_serial_number"===attrib.name&&($scope.serial=attrib.value)}),$scope.hasAttrib=1},function(){$scope.hasAttrib=0}),hasCallback||(hasCallback=!0,$scope.$on("node"+$scope.node.id+"Done",updateNode))):$location.path("/nodes"))}$scope.$emit("title","Nodes"),$scope.query={page:1,limit:10},$scope.myOrder="name";var NodesCtrl=this;this.nodes=[],this.selected=[],$scope.move_tenant=!0,$scope.restructureRoles=function(role){return{order:role.cohort,status:role.status,name:$scope._roles[role.role_id].name,icon:$scope._roles[role.role_id].icon,id:role.id}},this.getNodes=function(){var nodes=[];for(var id in $scope._nodes){var node=angular.copy($scope._nodes[id]),provider_id=node.provider_id,deployment_id=node.deployment_id;if(!$scope._nodes[id].system){"undefined"!=typeof $scope._providers[provider_id]&&(node.provider_name=$scope._providers[provider_id].name),"undefined"!=typeof $scope._deployments[deployment_id]&&(node.deployment_name=$scope._deployments[deployment_id].name);var tenant=$scope._tenants[node.tenant_id];"undefined"!=typeof tenant&&(node.tenant_name=tenant.name,node.tenant_uuid=tenant.uuid),nodes.push(node)}}NodesCtrl.nodes=nodes};var watchers=[$scope.$parent.$watchCollection("_deployments",NodesCtrl.getNodes),$scope.$parent.$watchCollection("_providers",NodesCtrl.getNodes),$scope.$parent.$watchCollection("_nodes",NodesCtrl.getNodes),$scope.$parent.$watchCollection("_tenants",NodesCtrl.getNodes)];$scope.$on("$destroy",function(){return watchers.map(function(w){return w()})}),this.deleteSelected=function(event){$scope.confirm(event,{title:"Delete Nodes",message:"Are you sure you want to delete selected nodes?",yesCallback:function(){NodesCtrl.selected.forEach(function(node){return node.admin?void console.log("Can't delete admin node !"+node.id):(console.log("Deleting node "+node.id),void api("/api/v2/nodes/"+node.id,{method:"DELETE"}).then(function(){console.log("Node deleted")}).then(function(){api.remove("node",node.id)}))}),NodesCtrl.selected=[]}})},this.deleteNode=function(event){$scope.confirm(event,{title:"Delete Node",message:"Are you sure you want to delete "+$scope.node.name,yesCallback:function(){return $scope.node.admin?(console.log("Can't delete admin node!"),void api.toast("Cannot delete admin node")):(console.log("Deleting node "+$scope.node.id),void api("/api/v2/nodes/"+$scope.node.id,{method:"DELETE"}).then(function(){console.log("Node deleted"),api.remove("node",$scope.node.id),$location.path("/nodes")}))}})},$scope.rawProfiles=function(current){var raw=[];for(var i in $scope._profiles)current.includes($scope._profiles[i].name)||raw.push($scope._profiles[i].name);return raw},this.showAddNodeDialog=function(ev){var useFullScreen=$mdMedia("sm")||$mdMedia("xs"),providers=[],provider=void 0;for(var id in $scope._providers)providers.push($scope._providers[id]),"metal"!==$scope._providers[id].name&&"phantom"!==$scope._providers[id].name&&"undefined"==typeof provider&&(provider=id);$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/addnodedialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{base_name:"digital-rebar-node",_providers:providers,provider:provider,hasProvider:providers.length>0,_profiles:$scope.rawProfiles([]),profiles:[],add_os:"default_os",number:1,_deployments:$scope._deployments},clickOutsideToClose:!0,fullscreen:useFullScreen})},this.showEditNodeDialog=function(ev,node){var useFullScreen=$mdMedia("sm")||$mdMedia("xs");$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/editnodedialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{_profiles:$scope.rawProfiles(node.profiles),node:node,name1:node.name,description1:node.description,profiles1:node.profiles,id:node.id},clickOutsideToClose:!0,fullscreen:useFullScreen})},$scope.assignNodes=function(arr,deployment_id,move_tenant){arr.forEach(function(node){var d={node_deployment:{deployment_id:deployment_id,old_deployment:node.deployment_id}};move_tenant&&(d.tenant_id=$scope._deployments[deployment_id].tenant_id),api("/api/v2/nodes/"+node.id,{method:"PUT",data:d}).then(function(resp){api.addNode(resp.data)})})},$scope.assignNodesToTenant=function(arr,tenant_id){arr.forEach(function(node){api("/api/v2/nodes/"+node.id,{method:"PUT",data:{tenant_id:tenant_id}}).then(function(resp){api.addNode(resp.data)})})},$scope.getRoles=function(){var roles=[],deployment_id=$scope.node.deployment_id;for(var id in $scope._deployment_roles){var deployment_role=$scope._deployment_roles[id];deployment_role.deployment_id===deployment_id&&roles.push(deployment_role)}return roles},$scope.bindNodeRole=function(role_id){var node_id=$scope.node.id,deployment_id=$scope.deployment_id;api("/api/v2/node_roles/",{method:"POST",data:{node_id:node_id,deployment_id:deployment_id,role_id:role_id}}).then(function(resp){api.addNodeRole(resp.data)},function(err){api.toast("Error Adding Node Role","node_role",err.data)})},$scope.setPower=function(action){$scope.confirm(event,{title:"Redeploy Node",message:"Are you sure you want to set power to "+action+"?",yesCallback:function(){$scope.node.id&&api("/api/v2/nodes/"+$scope.node.id+"/power",{data:{poweraction:action},method:"PUT"}).then(function(resp){api.addNode(resp.data)},function(err){api.toast("Error Powering Node","node",err.data)})}})},$scope.redeploy=function(target){$scope.confirm(event,{title:"Redeploy Node",message:"Are you sure you want to redeploy this node?",yesCallback:function(){$scope.redeploy_target($scope.node.id,target)}})},$scope.redeploy_target=function(node_id,target){api("/api/v2/nodes/"+node_id+"/propose",{method:"PUT"}).then(function(){target?api("/api/v2/nodes/"+node_id+"/attribs/provisioner-target_os",{method:"GET"}).then(function(resp){var a=resp.data;api("/api/v2/attribs/"+a.id,{method:"PUT",data:{node_id:a.node_id,role_id:a.role_id,value:target}}).then(function(){api("/api/v2/nodes/"+node_id+"/redeploy",{method:"PUT"}).then(function(){api.toast("Redeployed node "+node_id)},function(err){api.toast("Error Redeploying Node","node",err.data)})})}):api("/api/v2/nodes/"+node_id+"/redeploy",{method:"PUT"}).then(function(){api.toast("Redeployed node "+node_id)},function(err){api.toast("Error Redeploying Node","node",err.data)})})},$scope.reserve=function(reserve){$scope.node.id&&api("/api/v2/nodes/"+$scope.node.id,{method:"PUT",data:{available:!reserve}}).then(function(resp){api.addNode(resp.data)},function(err){api.toast("Error Reserving","node",err.data)})},$scope.redeploySelected=function(){$scope.confirm(event,{title:"Redeploy Nodes",message:"Are you sure you want to redeploy selected nodes?",yesCallback:function(){NodesCtrl.selected.forEach(function(node){node.id&&api("/api/v2/nodes/"+node.id+"/redeploy",{method:"PUT"}).then(function(){api.toast("Redeployed "+NodesCtrl.selected.length+" node"+(1===NodesCtrl.selected.length?"":"s"))},function(err){api.toast("Error Redeploying Node","node",err.data)})})}})},$scope.saveAttrib=function(){if($scope.editing){var data=angular.copy($scope.attribs);data.forEach(function(attrib){attrib.writable&&api("/api/v2/providers/"+$scope.id,{method:"POST",data:data},function(e){api.toast("Couldn't Save Attrib","attrib",e)})}),$scope.stopEditing()}},$scope.stopEditing=function(){$scope.editing&&($scope.attribs=$scope._attribs,$scope.provider=$scope._providers[$scope.id],$scope.editing=!1)},$scope.startEditing=function(){$scope.editing&&1===$scope.hasAttrib||($scope.editing=!0,$scope._attribs=angular.copy($scope.attribs))},$scope.id=$routeParams.id,$scope.target={obj:"node_id",id:$routeParams.id},$scope.node={},$scope.hasAttrib=-1,$scope.attribs=[],$scope.serial=void 0,$scope.bmc=void 0,$scope.power=[],$scope.nics={},$scope.powers={identify:"lightbulb_outline",on:"settings_power",off:"power_settings_new",cycle:"loop",reboot:"settings_backup_restore",reset:"settings_backup_restore",halt:"gavel"},$scope.editing=!1;var hasCallback=!1;Object.keys($scope._nodes).length?updateNode():$scope.$on("nodesDone",function(){"undefined"==typeof $scope._nodes[$scope.id]?$location.path("/nodes"):updateNode()})}])}()}),require.register("js/profile.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("ProfileCtrl",["$scope","api","$location","$mdDialog","$mdMedia","$routeParams",function($scope,api,$location,$mdDialog,$mdMedia,$routeParams){var title="Profiles";$scope.attribs={},$scope.expand={},$scope.values={},$scope.profile_count=-1,$scope.valueOrder="key";var deregister=$scope.$watchCollection("_profiles",function(profiles){$scope.profile_count=Object.keys(profiles).length,$scope.values={},Object.keys(profiles).forEach(function(id){var profile=profiles[id];$scope.values[id]=Object.keys(profile.values).map(function(key){return{key:key,value:profile.values[key]}})})});$scope.$on("$destroy",deregister),api("/api/v2/attribs").then(function(resp){var attribs=resp.data;$scope.attribs=attribs.reduce(function(map,obj){return obj.writable&&"undefined"!=typeof obj.schema&&""!==obj.schema&&(map[obj.name]=obj),map},$scope.attribs),$scope.profile_count=Object.keys($scope._profiles).length}),$scope.$emit("title",title),$routeParams.id&&($scope.expand[$routeParams.id]=!0),$scope.deleteProfile=function(name){$scope.confirm(event,{title:"Remove Profile",message:'Are you sure you want to remove "'+name+'" profile?',yesCallback:function(){api("/api/v2/profiles/"+name,{method:"DELETE"}).then(function(){api.getHealth();for(var id in $scope._profiles)$scope._profiles[id].name===name&&delete $scope._profiles[id];$scope.profile_count=Object.keys($scope._profiles).length},function(){api.getHealth()})}})},$scope.createProfilePrompt=function(ev,prof){var profile=angular.copy(prof),values={},name="";if("undefined"!=typeof profile){name=profile.name;for(var key in profile.values)values[key]={name:key,value:JSON.stringify(profile.values[key])}}$scope.profile_count=1,$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/addprofiledialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{editing:"undefined"!=typeof profile,attribs:$scope.attribs,profile:{name:name,values:values},original:angular.copy(profile)},clickOutsideToClose:!0,fullscreen:!0})}}])}()}),require.register("js/provider.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("ProviderCtrl",["$scope","$location","$routeParams","api","$mdMedia","$mdDialog",function($scope,$location,$routeParams,api,$mdMedia,$mdDialog){function updateProvider(){$scope.editing||($scope.provider=$scope._providers[$scope.id],$scope.provider?hasCallback||(hasCallback=!0,$scope.$on("provider"+$scope.provider.id+"Done",updateProvider)):$location.path("/providers"))}$scope.$emit("title","Provider"),$scope.myOrder="name",this.getProviders=function(){var providers=[];for(var id in $scope._providers)providers.push($scope._providers[id]);return providers},$scope.loadProvider=function(name){return function(editor){editor.setValue(JSON.stringify($scope.provider.auth_details[name]||"",0,"  "),-1),editor.getSession().on("change",function(){try{$scope.provider.auth_details[name]=JSON.parse(editor.getValue())}catch(e){}})}},$scope.restructureNodes=function(node){return{order:node.name,status:api.getNodeStatus(node),name:node.name,icon:api.getNodeIcon(node),id:node.id}},$scope.$on("keyDown",function(action,e){13===e.key&&$scope.startEditing(),27===e.key&&$scope.stopEditing()}),$scope.deleteProvider=function(provider){$scope.confirm(event,{title:"Delete Provider",message:"Are you sure you want to delete "+provider.name+" Provider?",yesCallback:function(){api("/api/v2/providers/"+provider.id,{method:"DELETE"}).then(function(){$scope._providers[provider.id].name="DELETED-"+$scope._providers[provider.id].name,api.toast("Deleted "+provider.name+" capability"),api.getHealth(),$location.path("/providers")},function(err){api.toast("Error Deleted Provider","capability",err.data)})}})},$scope.saveProvider=function(){if($scope.editing){var data=angular.copy($scope.provider);api("/api/v2/providers/"+$scope.id,{method:"PUT",data:data}).then(function(resp){api.addProvider(resp.data)},function(err){api.toast("Couldn't Save Provider","provider",err.data)}),$scope.stopEditing()}},$scope.stopEditing=function(){$scope.editing&&($scope.provider=$scope._providers[$scope.id],$scope.editing=!1)},$scope.startEditing=function(){$scope.editing||($scope.editing=!0,$scope.provider=angular.copy($scope._providers[$scope.id]))},$scope.showAddProviderDialog=function(ev,type){var useFullScreen=$mdMedia("sm")||$mdMedia("xs"),data={name:type.toLowerCase(),description:"Not Set",type:type,auth_details:{}};for(var key in $scope.providerTemplates[type]){var val=$scope.providerTemplates[type][key];data.auth_details[key]=val["default"]}$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/addproviderdialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{providerTemplates:$scope.providerTemplates,provider:data},clickOutsideToClose:!0,fullscreen:useFullScreen})},$scope.rawProfiles=function(current){var raw=[];for(var i in $scope._profiles)current.includes($scope._profiles[i].name)||raw.push($scope._profiles[i].name);return raw},$scope.showAddNodeDialog=function(ev){var useFullScreen=$mdMedia("sm")||$mdMedia("xs"),providers=[],provider=void 0;for(var id in $scope._providers)providers.push($scope._providers[id]),"metal"!==$scope._providers[id].name&&"phantom"!==$scope._providers[id].name&&"undefined"==typeof provider&&(provider=id);$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/addnodedialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{base_name:"digital-rebar-node",_providers:providers,hasProvider:providers.length>0,provider:$scope.provider.id,_profiles:$scope.rawProfiles([]),profiles:[],add_os:"default_os",number:1,_deployments:$scope._deployments},clickOutsideToClose:!0,fullscreen:useFullScreen})},$scope.id=$routeParams.id,$scope.provider=void 0,$scope.editing=!1;var hasCallback=!1;Object.keys($scope._providers).length?updateProvider():$scope.$on("providersDone",updateProvider)}])}()}),require.register("js/provisioner.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("ProvisionerCtrl",["$scope","api","$location","$mdDialog","$mdMedia","$routeParams",function($scope,api,$location,$mdDialog,$mdMedia,$routeParams){var route=$location.path().split("/")[2],title="Provisioner ";switch(route){case"bootenvs":title+="Boot Environments",api("/api/v2/attribs").then(function(resp){$scope.attribs=resp.data.map(function(a){return a.name})});break;case"templates":title+="Templates";break;case"machines":title+="Machines"}$scope.$emit("title",title),$scope.expand={},$scope.attribs=[];var mapNodes=function(){$scope.nodeMap={};for(var id in $scope._nodes){var node=$scope._nodes[id];$scope.nodeMap[node.uuid]=node}};mapNodes(),$scope.$on("nodesDone",mapNodes),$routeParams.id&&($scope.expand[$routeParams.id]=!0),$scope.deleteTemplate=function(uuid){$scope.confirm(event,{title:"Remove Template",message:"Are you sure you want to remove this template?",yesCallback:function(){api("/provisioner/templates/"+uuid,{
method:"DELETE"}).then(api.getHealth,api.getHealth)}})},$scope.createTemplatePrompt=function(ev,temp){var template=angular.copy(temp),useFullScreen=$mdMedia("sm")||$mdMedia("xs");$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/addtemplatedialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{editing:"undefined"!=typeof template,template:template||{UUID:"",Content:""}},clickOutsideToClose:!0,fullscreen:useFullScreen})},$scope.deleteBootEnv=function(name){$scope.confirm(event,{title:"Remove Boot Environment",message:"Are you sure you want to remove this boot environment?",yesCallback:function(){api("/provisioner/bootenvs/"+name,{method:"DELETE"}).then(api.getHealth,api.getHealth)}})},$scope.selectedFile="",$scope.selectFile=function(){document.getElementById("file").click()},$scope.upload=function(uuid){var fileElem=document.getElementById("file");$scope.selectedFile="";var f=fileElem.files[0],r=new FileReader;r.onloadend=function(e){var data=e.target.result;api("/provisioner/templates/"+uuid,{method:"PATCH",data:[{op:"replace",path:"/Contents",value:data}]}).then(function(){api.getHealth(),api.toast("Updated template")},function(err){api.getHealth(),api.toast("Error Updating template","template",err.data)})},r.readAsBinaryString(f),fileElem.value=""},$scope.createBootEnvPrompt=function(ev,env){var bootenv=angular.copy(env);$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/addbootenvdialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{editing:"undefined"!=typeof bootenv,attribs:$scope.attribs,_provisioner:$scope._provisioner,env:bootenv||{Name:"",OS:{Name:"",Family:"",Codename:"",Version:"",IsoFile:"",IsoSha256:"",IsoUrl:""},Kernel:"",Initrds:[],BootParams:"",RequiredParams:[],Templates:[]},original:angular.copy(bootenv)},clickOutsideToClose:!0,fullscreen:!0})}}])}()}),require.register("js/rebar.js",function(exports,require,module){"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};!function(){function capitalize(txt){return txt.charAt(0).toUpperCase()+txt.substr(1).toLowerCase()}function camelCase(name){return name.split("_").map(capitalize).join("")}var app=angular.module("app");app.filter("from",function(){return function(items,type,obj){var id=obj&&obj.id||0,result=[];return angular.forEach(items,function(value){value[type+"_id"]===id&&result.push(value)}),result}}),app.run(["$rootScope","$cookies","api",function($rootScope,$cookies,api){var currentLocation="https://"+location.hostname;$rootScope.host=$cookies.get("host")||currentLocation,$rootScope.$on("updateApi",function(){function finishReloading(){api.reloading=!1}api.reloading=!0,api.getHealth(),api.getUsers(),app.types.forEach(function(name){api.queue.push(function(){api["get"+camelCase(name)]().then(function(){$rootScope.$broadcast(name+"Done"),0===api.queue.length&&finishReloading(),api.nextQueue()},function(){0===api.queue.length&&finishReloading(),api.nextQueue()})})})}),$rootScope.$on("startUpdating",function(){api.reload(),api.getActive()}),$rootScope.tryFetch=function(){$rootScope.$emit("updateApi")},$rootScope._pollTimer,$rootScope._pollRate=15,$rootScope._pollRateOverride=!1,$rootScope._deployments={},$rootScope._deployment_roles={},$rootScope._roles={},$rootScope._nodes={},$rootScope._profiles={},$rootScope._networks={},$rootScope._network_ranges={},$rootScope._node_roles={},$rootScope._providers={},$rootScope._barclamps={},$rootScope.wizardBarclamps=[],$rootScope.showDNS=!1,$rootScope._DNS={zones:[]},$rootScope.showDHCP=!1,$rootScope._DHCP={subnets:[]},$rootScope.showProvisioner=!1,$rootScope._provisioner={bootenvs:[],templates:[],machines:[]},$rootScope._engine={},$rootScope._users={},$rootScope._tenants={},$rootScope._capabilities={}}]),app.factory("api",["$http","$rootScope","$timeout","$mdToast","debounce","localStorageService",function($http,$rootScope,$timeout,$mdToast,debounce,localStorageService){function inOrderMap(map,arr,depth){"undefined"==typeof depth&&(depth=0);for(var i in map)arr.push(map[i]),map[i].depth=depth,inOrderMap(map[i].children,arr,depth+1)}var api=function(path,args){return args=args||{},args.method=args.method||"GET",args.headers=args.headers||{},args.api=!0,args.url=$rootScope.host+path,$http(args)};return api.reloading=!1,app.types=["deployments","roles","nodes","profiles","node_roles","deployment_roles","networks","network_ranges","providers","barclamps"],api.testSchema=function(data,schema){if("undefined"==typeof schema)return!0;if("undefined"==typeof data&&!schema.required)return!0;switch(schema.type){case"any":return!0;case"str":if("string"!=typeof data)return!1;if(!schema.pattern)return!0;var regex=new RegExp(schema.pattern.substr(1,schema.pattern.length-2));return!!data.match(regex);case"bool":return"boolean"==typeof data;case"int":return"number"==typeof data;case"seq":if("object"!==("undefined"==typeof data?"undefined":_typeof(data))||!Array.isArray(data))return!1;var newSchema=schema.sequence[0];for(var i in data)if(!api.testSchema(data[i],newSchema))return!1;return!0;case"map":if("object"!==("undefined"==typeof data?"undefined":_typeof(data))||Array.isArray(data))return!1;if("undefined"!=typeof schema.mapping["="]){var _newSchema=schema.mapping["="];for(var key in data)if(!api.testSchema(data[key],_newSchema))return!1}else{for(var _key in schema.mapping){var _newSchema2=schema.mapping[_key];if(!api.testSchema(data[_key],_newSchema2))return!1}for(var _key2 in data)if("undefined"==typeof schema.mapping[_key2])return!1}return!0}return!1},api.exampleFromSchema=function(schema){if("undefined"==typeof schema)return"";switch(schema.type){case"any":return"="+(schema.required?"*":"");case"str":return"string"+(schema.required?"*":"")+(schema.pattern?" "+schema.pattern:"");case"bool":return"boolean"+(schema.required?"*":"");case"int":return"number"+(schema.required?"*":"");case"seq":var newSchema=schema.sequence[0];return newSchema.required=schema.required,[api.exampleFromSchema(newSchema)];case"map":var map={};for(var key in schema.mapping){var _newSchema3=schema.mapping[key];map[key]=api.exampleFromSchema(_newSchema3)}return map}},api.lastUpdate=(new Date).getTime(),api.queue=[],api.queueLen=0,api.errors=localStorageService.get("errors")||[],api.toast=function(message,error,err){$mdToast.show($mdToast.simple().textContent(message).position("bottom left").hideDelay(3e3)),error&&(api.errors.push({type:error,message:message,err:err,stack:(new Error).stack,date:Date.now()}),localStorageService.add("errors",api.errors))},api.get_id=function(url){var headers={headers:{"x-return-attributes":'["id"]'}};return api(url,headers)},api.fetch=function(name,id){var headers={};return"node_role"===name&&(headers={headers:{"x-return-attributes":'["id","name","deployment_id","role_id","node_id","state","cohort","run_count","status","available","order","created_at","updated_at","uuid","tenant_id","node_error"]'}}),api("/api/v2/"+name+"s/"+id,headers).then(function(resp){api["add"+camelCase(name)](resp.data)},function(err){return"Unauthorized\n"===err.data?void $rootScope.$broadcast(name+id+"Done"):(api.remove(name,id),void $rootScope.$broadcast(name+id+"Done"))})},api.reload=function(){$rootScope.$emit("updateApi"),api.lastUpdate=(new Date).getTime(),debounce(api.reload,18e4,!1)()},api.addQueue=function(name,id){api.queue.push(function(){api.fetch(name,id).then(api.nextQueue,api.nextQueue)})},api.nextQueue=function(){api.queue.length?$rootScope.$evalAsync(api.queue.splice(0,1)[0]):(api.queueLen=0,$rootScope._pollTimer=$timeout(api.getActive,1e3*$rootScope._pollRate))},api.pollRate=function(rate,override){override&&!$rootScope._pollRateOverride&&($rootScope._pollRateOverride=!0),$rootScope._pollRate!==rate&&($timeout.cancel($rootScope._pollTimer),$rootScope._pollRate=rate,console.debug("Polling Rate set to "+$rootScope._pollRate+" (override "+$rootScope._pollRateOverride+")"))},api.getActive=function(){var deltaTime=Math.ceil(((new Date).getTime()-api.lastUpdate)/1e3);api("/api/status/active",{method:"PUT",params:{age:deltaTime},data:{nodes:Object.keys($rootScope._nodes).map(Number),deployments:Object.keys($rootScope._deployments).map(Number)}}).then(function(resp){var data=resp.data;api.lastUpdate=(new Date).getTime();var _loop=function(type){data.changed[type].forEach(function(id){var name=/^.*(?=s)/.exec(type)[0];api.addQueue(name,id)})};for(var type in data.changed)_loop(type);for(var type in data.deleted)for(var i in data.deleted[type]){var id=data.deleted[type][i],name=/^.*(?=s)/.exec(type)[0];try{api.remove(name,id)}catch(e){console.warn(e)}}api.queueLen=api.queue.length,api.nextQueue()},function(resp){console.warn(resp),api.nextQueue()})},api.getHealth=function(){api("/health").then(function(resp){var map=resp.data.Map;$rootScope.showDNS="undefined"!=typeof map["dns-mgmt-service"],$rootScope.showDHCP="undefined"!=typeof map["dhcp-mgmt-service"],$rootScope.showProvisioner="undefined"!=typeof map["provisioner-mgmt-service"],$rootScope.showEngine="undefined"!=typeof map["rule-engine-service"],$rootScope.showEngine&&api("/rule-engine/api/v0/rulesets/").then(function(resp){$rootScope._engine=resp.data}),$rootScope.showDNS&&api("/dns/zones").then(function(resp){$rootScope._DNS.zones=resp.data}),$rootScope.showDHCP&&api("/dhcp/subnets").then(function(resp){$rootScope._DHCP.subnets=resp.data}),$rootScope.showProvisioner&&(api("/provisioner/machines").then(function(resp){$rootScope._provisioner.machines=resp.data}),api("/provisioner/templates").then(function(resp){$rootScope._provisioner.templates=resp.data}),api("/provisioner/bootenvs").then(function(resp){$rootScope._provisioner.bootenvs=resp.data}))},function(){$rootScope.showDNS=!1,$rootScope.showDHCP=!1,$rootScope.showProvisioner=!1})},api.getUsers=function(){api("/api/v2/users").then(function(resp){var users=resp.data;$rootScope._users={};for(var i in users)users[i].caps={},$rootScope._users[users[i].id]=users[i];api("/api/v2/user_tenant_capabilities").then(function(resp){var caps=resp.data;for(var _i in caps){var cap=caps[_i];$rootScope._users[cap.user_id].caps[cap.tenant_id]||($rootScope._users[cap.user_id].caps[cap.tenant_id]={id:cap.tenant_id,caps:[]}),$rootScope._users[cap.user_id].caps[cap.tenant_id].caps.push(cap.capability_id)}}),api("/api/v2/tenants").then(function(resp){var arr=resp.data;$rootScope._tenants={};for(var _i2 in arr){arr[_i2].children=[],arr[_i2].users=[],$rootScope._tenants[arr[_i2].id]=arr[_i2];for(var j in users)"undefined"==typeof users[j].caps[arr[_i2].id]&&(users[j].caps[arr[_i2].id]={id:arr[_i2].id,caps:[]})}for(var _i3 in users)$rootScope._tenants[users[_i3].tenant_id].users.push(users[_i3]);var parents=[];for(var _i4 in $rootScope._tenants){var tenant=$rootScope._tenants[_i4];"undefined"!=typeof tenant.parent_id&&$rootScope._tenants[tenant.parent_id]?$rootScope._tenants[tenant.parent_id].children.push(tenant):parents.push(tenant)}$rootScope._tenantsInOrder=[],inOrderMap(parents,$rootScope._tenantsInOrder)})}),api("/api/v2/capabilities").then(function(resp){var arr=resp.data;$rootScope._capabilities={};for(var i in arr)$rootScope._capabilities[arr[i].id]=arr[i]})},api.remove=function(type,parentId){"undefined"!=typeof parentId&&$rootScope["_"+type+"s"][parentId]&&(console.log("removing "+type+" "+parentId),delete $rootScope["_"+type+"s"][parentId],$rootScope.$broadcast(type+parentId+"Done"),"deployment"===type&&["nodes","node_roles"].forEach(function(item){var name=/^.*(?=s)/.exec(item)[0];for(var id in $rootScope["_"+item]){var child=$rootScope["_"+item][id];child.deployment_id===parentId&&api.addQueue(name,id)}}))},api.addDeployment=function(deployment){var id=deployment.id;$rootScope._deployments[id]=deployment,$rootScope.$broadcast("deployment"+id+"Done")},api.getDeployments=function(){return api("/api/v2/deployments").then(function(resp){$rootScope._deployments={},resp.data.map(api.addDeployment)})},api.addNode=function(node){var id=node.id;node.address=node["node-control-address"];var state=$rootScope.states[node.state];node.alive||(state="off",node.reserved&&(state="reserved")),node.status=state,node.alive?(node.simpleState=2,node.state===-1&&(node.simpleState=1),0===node.state&&(node.simpleState=0)):node.simpleState=3,$rootScope._nodes[id]=node,$rootScope.$broadcast("node"+id+"Done"),$rootScope._pollRateOverride||(Object.keys($rootScope._nodes).length>25?api.pollRate(45,!1):Object.keys($rootScope._nodes).length>50&&api.pollRate(30,!1))},api.getNodes=function(){return api("/api/v2/nodes").then(function(resp){$rootScope._nodes={},resp.data.map(api.addNode)})},api.addProfile=function(profile){var id=profile.id;$rootScope._profiles[id]=profile,$rootScope.$broadcast("profile"+id+"Done")},api.getProfiles=function(){return api("/api/v2/profiles").then(function(resp){$rootScope._profiles={},resp.data.map(api.addProfile)})},api.addRole=function(role){var id=role.id;$rootScope._roles[id]=role,$rootScope.$broadcast("role"+id+"Done")},api.getRoles=function(){return api("/api/v2/roles").then(function(resp){$rootScope._roles={},resp.data.map(api.addRole)})},api.addDeploymentRole=function(role){role.cohort=function(){return $rootScope._roles[role.role_id].cohort};var id=role.id;$rootScope._deployment_roles[id]=role,$rootScope.$broadcast("deployment_role"+id+"Done")},api.getDeploymentRoles=function(){return api("/api/v2/deployment_roles").then(function(resp){$rootScope._deployment_roles={},resp.data.map(api.addDeploymentRole)})},api.addProvider=function(provider){var id=provider.id;$rootScope._providers[id]=provider,$rootScope.$broadcast("provider"+id+"Done")},api.getProviders=function(){return api("/api/v2/providers").then(function(resp){$rootScope._providers={},resp.data.map(api.addProvider)})},api.addNetwork=function(network){var id=network.id;$rootScope._networks[id]=network,$rootScope.$broadcast("network"+id+"Done")},api.addRange=function(range){var id=range.id;$rootScope._network_ranges[id]=range,$rootScope.$broadcast("network_range"+id+"Done")},api.getNetworkRanges=function(){return api("/api/v2/network_ranges").then(function(resp){$rootScope._network_ranges={},resp.data.map(api.addRange)})},api.getNetworks=function(){return api("/api/v2/networks").then(function(resp){$rootScope._networks={},resp.data.map(api.addNetwork)})},api.addNodeRole=function(role){var id=role.id;role.status=$rootScope.states[role.state],delete role.runlog,delete $rootScope._node_roles[id],$rootScope._node_roles[id]=role,$rootScope.$broadcast("node_role"+id+"Done")},api.getNodeRoles=function(){return api("/api/v2/node_roles",{headers:{"x-return-attributes":'["id","name","deployment_id","role_id","node_id","state","cohort","run_count","status","available","order","created_at","updated_at","uuid","tenant_id","node_error"]'}}).then(function(resp){$rootScope._node_roles={},resp.data.map(api.addNodeRole)})},api.addBarclamp=function(barclamp){var id=barclamp.id;if($rootScope._barclamps[id]=barclamp,$rootScope.$broadcast("barclamp"+id+"Done"),barclamp.cfg_data&&"undefined"!=typeof barclamp.cfg_data.wizard){if(!barclamp.cfg_data.wizard)return;if(!barclamp.cfg_data.wizard.version)return;if(2!==barclamp.cfg_data.wizard.version)return;var exists=!1;for(var i in $rootScope.wizardBarclamps){var b=$rootScope.wizardBarclamps[i];if(b.id===id){exists=!0;break}}exists||$rootScope.wizardBarclamps.push({id:id,title:barclamp.cfg_data.wizard.name,icon:barclamp.cfg_data.wizard.icon||"create_new_folder",path:"/workloads/"+id})}},api.getBarclamps=function(){return api("/api/v2/barclamps").then(function(resp){$rootScope._barclamps={},resp.data.map(api.addBarclamp)})},api.saveBarclamp=function(config){config.barclamp.source_path="API_uploaded";var payload={value:config};api("/api/v2/barclamps",{method:"POST",data:payload}).then(function(){api("/api/v2/barclamps/"+config.barclamp.name).then(function(resp){api.addBarclamp(resp.data)}),api.toast("Updated barclamp"),api.getRoles()},function(err){api.toast("Error Updating barclamp","barclamp",err.data)})},api.getNodeStatus=function(node){var now=Date.now();return"undefined"==typeof node?"error":node._statusTime&&node._statusTime+500>now?node._status:(node._statusTime=now,node.alive?node.available?node._status=$rootScope.states[node.state]:node._status="reserved":node._status="off")},api.getNodeIcon=function(node){var ns=api.getNodeStatus(node);return"ready"===ns?node.icon:$rootScope.icons[ns]},api.truncName=function(name){return"undefined"==typeof name?"":name.substring(0,name.indexOf("."))},api}])}()}),require.register("js/roles.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("RolesCtrl",["$scope","debounce","$routeParams","$mdMedia","$mdDialog","api",function($scope,debounce,$routeParams,$mdMedia,$mdDialog,api){function updateRole(){if(!$scope.editing&&($scope.role=$scope._roles[$scope.id],"undefined"!=typeof $scope.role)){for(var id in $scope._roles){var r=$scope._roles[id];"requires"in $scope.role&&$scope.role.requires.includes(r.name)?$scope.relations.Parents.push(r):"requires"in $scope._roles[id]&&$scope._roles[id].requires.includes($scope.role.name)?$scope.relations.Children.push(r):"provides"in $scope.role&&$scope.role.provides.includes(r.name)?$scope.relations.Provides.push(r):"conflicts"in $scope.role&&$scope.role.conflicts.includes(r.name)&&$scope.relations.Conflicts.push(r)}if($scope.metadata=$scope.role.metadata,"script"===$scope.role.jig_name&&$scope.role.metadata&&($scope.scripts=$scope.role.metadata.scripts),"ansible-playbook"===$scope.role.jig_name&&$scope.role.metadata.files)for(var i in $scope.metadata.files)"string"==typeof $scope.metadata.files[i].body?$scope.metadata.files[i].temp=$scope.metadata.files[i].body:$scope.metadata.files[i].temp=$scope.metadata.files[i].body.join("\n");hasCallback||(hasCallback=!0,$scope.$on("role"+$scope.role.id+"Done",updateRole))}}$scope.$emit("title","Roles"),$scope.query={page:1,limit:10},$scope.myOrder="name",$scope.flags=["library","implicit","bootstrap","discovery","cluster","destructive","abstract","powersave"],$scope.restructureRoles=function(node_role){return{order:node_role.cohort,status:node_role.status,name:$scope._nodes[node_role.node_id].name,icon:$scope.icons[node_role.status],id:node_role.id}},$scope.getRoles=function(){var roles=[];for(var id in $scope._roles)roles.push($scope._roles[id]);return roles},$scope.id=$routeParams.id,$scope.target={obj:"role_id",id:$routeParams.id},$scope.role={},$scope.metadata={},$scope.scripts=[],$scope.editing=!1,$scope.relations={Parents:[],Children:[],Provides:[],Conflicts:[]};var hasCallback=!1;$scope.retry=function(){Object.keys($scope._node_roles).forEach(function(id){var nr=$scope._node_roles[id];nr.role_id===$scope.id&&api("/api/v2/node_roles/"+id+"/retry",{method:"PUT"}).then(function(resp){api.addNodeRole(resp.data),api.toast("Retried Role "+$scope.role.name+" on Node ID "+nr.node_id)},function(err){api.toast("Error retrying node role","node_role",err.data)})})},$scope.assignDeployment=function(role_id,deployment_id){api("/api/v2/deployment_roles/",{method:"POST",data:{deployment_id:deployment_id,add_role:{role_id:role_id}}}).then(function(resp){api.addDeploymentRole(resp.data)},function(err){api.toast("Error Adding Deployment Role","deployment_role",err.data)})},Object.keys($scope._roles).length?updateRole():$scope.$on("rolesDone",updateRole),$scope.removeSection=function(index){delete $scope.scripts[index],api.toast("Removed Script","role",index)},$scope.addSection=function(){var s='#!/bin/bash\necho "hello"\nexit 0\n';$scope.scripts.push(s)},$scope.saveScripts=function(){api("/api/v2/barclamps/"+$scope.role.barclamp_id).then(function(resp){var bc=resp.data,roles=bc.cfg_data.roles;for(var r in roles)if(roles[r].name===$scope.role.name){delete roles[r].metadata.scripts,roles[r].metadata.scripts=[];for(var i in $scope.scripts)roles[r].metadata.scripts.push($scope.scripts[i]);api.saveBarclamp(bc.cfg_data)}})},$scope.removeFile=function(index){$scope.metadata.files.splice(index,1),api.toast("Removed Ansible File","file",index)},$scope.addFile=function(){var s={type:"tasks",name:"main.yml",body:["---",'- debug: msg="Ansibile Metadata Role"','- debug: var="hints"','- debug: var="rebar_wall"']};$scope.metadata.files.push(s)},$scope.saveAnsible=function(){if("ansible-playbook"===$scope.role.jig_name&&$scope.metadata.files)for(var i in $scope.metadata.files)$scope.metadata.files[i].body=$scope.metadata.files[i].temp.split("\n");api("/api/v2/barclamps/"+$scope.role.barclamp_id).then(function(resp){var bc=resp.data,roles=bc.cfg_data.roles;for(var r in roles)if(roles[r].name===$scope.role.name){roles[r].metadata=$scope.metadata;for(var _i in roles[r].metadata.files)delete roles[r].metadata.files[_i].temp;api.saveBarclamp(bc.cfg_data)}})}}])}()}),require.register("js/switches.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("SwitchesCtrl",["$scope","$location","debounce","$routeParams","$mdMedia","$mdDialog","api",function($scope,$location,debounce,$routeParams,$mdMedia,$mdDialog,api){$scope.$emit("title","Switches"),$scope.sweetches={},$scope.layout=[];for(var p=1;p<49;p+=2)$scope.layout.push(p);$scope.$on("nodesDone",function(){var nodes=[];for(var id in $scope._nodes)$scope._nodes[id].system||nodes.push($scope._nodes[id].id);for(var nid in nodes)api("/api/v2/nodes/"+nodes[nid]+"/attribs/ports").then(function(resp){var value=resp.data,node=$scope._nodes[value.node_id];"undefined"==typeof value.value.lldp&&(console.log("switches: missing lldp data for node "+node.id+" using fake data for testing"),value.value=$scope.fakeValue(node.id));for(var nic in value.value.lldp){var sw=value.value.lldp[nic].chassis.mac,raw=value.value.lldp[nic].port.descr,portRegex=raw.match(/([0-9]*)\/([0-9]*)\/([0-9]*)/),port=parseInt(portRegex[3]);if(!$scope.sweetches[sw]){for(var ports={},_p=1;_p<49;_p++)ports[_p]=[];$scope.sweetches[sw]={"switch":{mac:sw,description:value.value.lldp[nic].chassis.descr},ports:ports}}$scope.sweetches[sw][port]||($scope.sweetches[sw].ports[port]=[]);var nodemap={id:node.id,name:node.name,nic:nic};$scope.sweetches[sw].ports[port].push(nodemap)}})}),$scope.fakeValue=function(node_id){return{lldp:{eth0:{age:"0 day, 00:00:58",chassis:{Bridge:{enabled:"on"},Router:{enabled:"on"},descr:"Juniper Networks, Inc. qfx5100-24q-2p Ethernet Switch, kernel JUNOS 13.2X51-D38, Build date: 2015-06-12 02:33:47 UTC Copyright (c) 1996-2015 Juniper Networks, Inc.",mac:node_id%2===0?"20:4e:71:32:ca:fe":"20:4e:71:32:be:ef","mgmt-ip":"192.168.105.2",ttl:"120"},port:{descr:"xe-0/0/"+node_id%48+":1",local:"2"+node_id},rid:"1",via:"LLDP"},eth1:{age:"0 day, 00:00:58",chassis:{Bridge:{enabled:"on"},Router:{enabled:"on"},descr:"Juniper Networks, Inc. qfx5100-24q-2p Ethernet Switch, kernel JUNOS 13.2X51-D38, Build date: 2015-06-12 02:33:47 UTC Copyright (c) 1996-2015 Juniper Networks, Inc.",mac:node_id%2===0?"20:4e:71:32:be:ef":"20:4e:71:32:ca:fe","mgmt-ip":"192.168.105.2",ttl:"120"},port:{descr:"xe-0/0/"+(node_id+24)%48+":1",local:"3"+node_id},rid:"1",via:"LLDP"}},status:"Success"}}}])}()}),require.register("js/tenants.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("TenantsCtrl",["$scope","api","$mdDialog","$mdMedia","$routeParams",function($scope,api,$mdDialog,$mdMedia,$routeParams){$scope.$emit("title","Tenants"),$scope.expand={},$routeParams.id&&($scope.expand[$routeParams.id]=!0),$scope.deleteTenant=function(uuid){$scope.confirm(event,{title:"Remove Tenant",message:"Are you sure you want to remove this tenant?",yesCallback:function(){api("/tenants/"+uuid,{method:"DELETE"}).then(api.getUsers,function(err){api.getUsers(),api.toast("Error deleting tenants - "+err.data.message,"tenants",err.data)})}})},$scope.createTenantPrompt=function(ev,temp){var tenant=angular.copy(temp),useFullScreen=$mdMedia("sm")||$mdMedia("xs");$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/addtenantdialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{editing:"undefined"!=typeof tenant,tenants:$scope._tenants,tenant:tenant||{UUID:"",Content:""}},clickOutsideToClose:!0,fullscreen:useFullScreen}).then(api.getUsers,api.getUsers)}}])}()}),require.register("js/users.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("UsersCtrl",["$scope","api","$mdMedia","$mdDialog","$routeParams",function($scope,api,$mdMedia,$mdDialog,$routeParams){$scope.$emit("title","Users"),$scope.expand={},$routeParams.id&&($scope.expand[$routeParams.id]=!0),$scope.getUserList=function(){var list=[];for(var i in $scope._users)list.push($scope._users[i]);return list},$scope.deleteUser=function(uuid){$scope.confirm(event,{title:"Remove User",message:"Are you sure you want to remove this user?",yesCallback:function(){api("/api/v2/users/"+uuid,{method:"DELETE"}).then(api.getUsers,api.getUsers)}})},$scope.createUserPrompt=function(ev,temp){var user=angular.copy(temp),useFullScreen=$mdMedia("sm")||$mdMedia("xs");$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/adduserdialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{editing:"undefined"!=typeof user,user:user||{UUID:"",Content:""},tenants:$scope._tenants},clickOutsideToClose:!0,fullscreen:useFullScreen}).then(api.getUsers,api.getUsers)},$scope.editCapsPrompt=function(ev,temp){var user=angular.copy(temp),useFullScreen=$mdMedia("sm")||$mdMedia("xs"),caps=[];for(var id in $scope._capabilities)caps.push($scope._capabilities[id]);for(var tenant_id in $scope._tenants)"undefined"==typeof user.caps[tenant_id]&&(user.caps[tenant_id]={id:tenant_id,caps:[]});var original=angular.copy(user);$mdDialog.show({controller:"DialogController",controllerAs:"dialog",templateUrl:"views/dialogs/editcapabilitiesdialog.tmpl.html",parent:angular.element(document.body),targetEvent:ev,locals:{user:user,update:api.getUsers,original:original,tenants:$scope._tenantsInOrder,capabilitiesList:caps,capabilities:$scope._capabilities},clickOutsideToClose:!0,fullscreen:useFullScreen}).then(api.getUsers)}}])}()}),require.register("js/welcome.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("WelcomeCtrl",["$scope",function($scope){$scope.$emit("title","Welcome to RackN Digital Rebar!")}])}()}),require.register("js/workloads.js",function(exports,require,module){"use strict";!function(){angular.module("app").controller("WorkloadsCtrl",["$scope","api","$location","$mdDialog","$routeParams","localStorageService",function($scope,api,$location,$mdDialog,$routeParams,localStorageService){$scope.$emit("title","Wizard");var workloads=this;this.required_service="",this.commit=!0,this.deployment_id=0,this.source="system",this.createDeployment=!0,this.use_system=!1,this.selected=[],this.attribs={},this.keys=[["",""]],$scope.submitStatus=0,$scope.done=0,$scope.status=0,$scope.steps=[{name:"Deployment",path:"views/wizard/deployment.html",icon:"directions_run",complete:function(){if(workloads.createDeployment){var deployment=workloads.name;if(!deployment)return!1}else{var _deployment=$scope._deployments[workloads.deployment_id];if(!_deployment)return!1}return workloads.use_system=!wizard.create_nodes,!0}},{name:"OS",path:"views/wizard/os.html",icon:"directions_bike",complete:function(){var metal=wizard.system_nodes&&workloads.attribs["provisioner-target_os"]&&workloads.use_system,cloud=wizard.create_nodes&&workloads.provider;return metal||cloud}},{name:"Attributes",path:"views/wizard/attributes.html",icon:"directions_car",complete:function(){return $scope.collectNodes(),!0}},{name:"Nodes",path:"views/wizard/nodes.html",icon:"directions_train",complete:function(output){if(0===workloads.selected.length)return!!output&&[!1,"You must select at least one node"];var control={},hasControl={};for(var j in wizard.services){var service=wizard.services[j];control[service.name]=0,hasControl[service.name]=!1}workloads.selected.forEach(function(node){var canHaveRequired=!1,hasRequired=!1;for(var _j in wizard.services){var _service=wizard.services[_j],hasService=serviceMap[node.id][_service.name];"control"===_service.type&&(hasControl[_service.name]=!0),"required"===_service.type&&(canHaveRequired=!0),hasService&&"required"===_service.type&&(hasRequired=!0),hasService&&"control"===_service.type&&control[_service.name]++}if(!hasRequired&&canHaveRequired)return!!output&&[!1,"Every node must have a Required Service"]});for(var _j2 in wizard.services){var name=wizard.services[_j2].name;if(control[name]%2!==1&&hasControl[name])return!!output&&[!1,"An Odd Number of "+wizard.services[_j2].description+" Control Services is Required"]}return!output||[!0,""]}},{name:"Overview",path:"views/wizard/overview.html",icon:"airplanemode_active",complete:function(){return!0},onStep:function(){$scope.submitStatus=0,api("/api/v2/deployments"+(workloads.createDeployment?"":"/"+workloads.deployment_id+"/batch"),{method:workloads.createDeployment?"POST":"PUT",data:$scope.generateBlob()}).then(function(){$scope.submitStatus=1},function(err){api.toast("Error Running Wizard","deployments",err.data),$scope.submitStatus=-1})}},{path:"views/wizard/done.html",complete:function(){return!1},finalStep:!0}],$scope.editInHelper=function(){localStorageService.add("api_helper_payload",JSON.stringify($scope.generateBlob(),null,"  ")),localStorageService.add("api_helper_method",workloads.createDeployment?"post":"put"),localStorageService.add("api_helper_route",workloads.createDeployment?"/api/v2/deployments":"/api/v2/deployments/"+workloads.deployment_id+"/batch"),$location.path("/api_helper")},$scope.setProgress=function(status){status<=$scope.status&&($scope.done=status)},$scope.canNext=!1,$scope.setCanNext=function(){$scope.canNext=!0},$scope.nextStep=function(){$scope.status>$scope.done?($scope.done++,$scope.canNext=!1):$scope.status===$scope.done&&$scope.steps[$scope.done].complete()&&($scope.steps[$scope.done].onStep&&$scope.steps[$scope.done].onStep(),$scope.done++,$scope.status++,$scope.canNext=!1)},$scope.prevStep=function(){$scope.done>0&&$scope.done--},$scope.getDeployments=function(){var deployments=[];for(var i in $scope._deployments){var deployment=$scope._deployments[i];deployment.system||deployments.push(deployment)}return deployments},$scope.providerMap={};for(var i in $scope._providers){var provider=$scope._providers[i];$scope.providerMap[provider.name]=provider,"MetalProvider"!==provider.type&&""!==provider.type&&(this.provider=provider.name)}$scope.showAdvanced=!1,$scope.toggleAdvanced=function(){$scope.showAdvanced=!$scope.showAdvanced};var id=$routeParams.id;if("undefined"==typeof $scope._barclamps[id]||"undefined"==typeof $scope._barclamps[id].cfg_data.wizard)return void $scope.setPath("/deployments");var barclamp=$scope.barclamp=$scope._barclamps[id],wizard=$scope.wizard=barclamp.cfg_data.wizard,serviceMap=$scope.serviceMap={};$scope.$emit("title",wizard.name+" Wizard"),this.name=barclamp.cfg_data.barclamp.name,$scope.osList=[],wizard.system_nodes&&api("/api/v2/nodes/system-phantom.internal.local/attribs/provisioner-available-oses").then(function(resp){var data=resp.data;if(data.value){$scope.osList=Object.keys(data.value);var ossupport=barclamp.cfg_data.barclamp.os_support;for(var _i in $scope.osList)ossupport&&ossupport.length&&ossupport.indexOf($scope.osList[_i])===-1&&$scope.osList.splice(_i,1);$scope.osList.length&&(workloads.attribs["provisioner-target_os"]=$scope.osList[0])}}),$scope.attribMap={},api("/api/v2/attribs").then(function(resp){var data=resp.data;for(var _i2 in data){var attrib=data[_i2];$scope.attribMap[attrib.name]=attrib}for(var _i3 in wizard.base_attribs){var _attrib=wizard.base_attribs[_i3];"undefined"==typeof workloads.attribs[_attrib]&&(workloads.attribs[_attrib]=$scope.attribMap[_attrib]["default"].value);
}for(var _i4 in wizard.advanced_attribs){var _attrib2=wizard.advanced_attribs[_i4];"undefined"==typeof workloads.attribs[_attrib2]&&(workloads.attribs[_attrib2]=$scope.attribMap[_attrib2]["default"].value)}},function(err){api.toast("Error fetching Attribs","attribs",err.data)}),$scope.roles=[],$scope.roleMap={};for(var _id in $scope._roles){var role=$scope._roles[_id];$scope.roleMap[role.name]=role}for(var _i5=0;_i5<wizard.services.length;_i5++){var type=wizard.services[_i5].type;if("required"===type){workloads.required_service=wizard.services[_i5].name;break}}$scope.newId=-1,$scope.createdNodes=[],$scope.systemNodes=[],$scope.createNodes=function(){if($scope.createdNodes=[],wizard.create_nodes)for(var _i6=0;_i6<wizard.services.length;_i6++){var name=wizard.services[_i6].name,_type=wizard.services[_i6].type,count=wizard.services[_i6].count;if(count>0&&("control"===_type||"worker"===_type))for(var j=0;j<count;j++){var nid=$scope.newId--,node={id:nid,name:-nid+"-create-"+name+"-"+(j+1),order:nid};serviceMap[nid]={},serviceMap[nid][_type]=!0,""!==workloads.required_service&&(serviceMap[nid][workloads.required_service]=!0),$scope.createdNodes.push(node),workloads.selected=$scope.createdNodes}}},$scope.createNodes(),$scope.addNodes=function(){var nid=$scope.newId--,node={id:nid,name:-nid+"-added-node",order:nid};serviceMap[nid]={},""!==workloads.required_service,serviceMap[nid][workloads.required_service]=!0,serviceMap[nid].worker=!0,$scope.createdNodes.push(node),workloads.selected=$scope.createdNodes},$scope.collectNodes=function(){if($scope.systemNodes=[],wizard.system_nodes&&workloads.use_system){var system_id=0;for(var _i7 in $scope._deployments){var deployment=$scope._deployments[_i7];if(deployment.system){system_id=_i7;break}}Object.keys($scope._nodes).forEach(function(id){var node=$scope._nodes[id],source_id=system_id;for(var _i8 in $scope._deployments)if($scope._deployments[_i8].name===workloads.source){source_id=$scope._deployments[_i8].id;break}if(!node.system&&node.deployment_id===source_id){serviceMap[id]={};for(var _i9=0;_i9<wizard.services.length;_i9++){var _type2=wizard.services[_i9].type,count=wizard.services[_i9].count;if(count>0&&("control"===_type2||"worker"===_type2)){serviceMap[id][_type2]=!0,wizard.services[_i9].count--;break}}""!==workloads.required_service&&(serviceMap[id][workloads.required_service]=!0),console.log("adding node "+node.name+" from deployment id "+source_id),$scope.systemNodes.push(node),workloads.selected=$scope.systemNodes}})}},$scope.select=function(node,service){var state=serviceMap[node.id][service.name],s=void 0;switch(service.type){case"required":if(state)return;for(var _i10 in serviceMap[node.id]){for(var j in wizard.services)if(wizard.services[j].name===_i10){s=wizard.services[j];break}s&&"required"===s.type&&(serviceMap[node.id][_i10]=!1)}serviceMap[node.id][service.name]=!0;break;case"control":if(state)serviceMap[node.id][service.name]=!1;else{for(var _i11 in serviceMap[node.id]){for(var _j3 in wizard.services)if(wizard.services[_j3].name===_i11){s=wizard.services[_j3];break}s&&"worker"===s.type&&(serviceMap[node.id][_i11]=!1)}serviceMap[node.id][service.name]=!0}break;case"worker":if(state)serviceMap[node.id][service.name]=!1;else{for(var _i12 in serviceMap[node.id])for(var _j4 in wizard.services)if(wizard.services[_j4].name===_i12){s=wizard.services[_j4];break}serviceMap[node.id][service.name]=!0}break;default:serviceMap[node.id][service.name]=!serviceMap[node.id][service.name]}workloads.selected.includes(node)||workloads.selected.push(node)},$scope.getNodes=function(){return workloads.use_system?$scope.systemNodes:$scope.createdNodes},$scope.generateBlob=function(){console.log("JSON generate starting");var data={commit:workloads.commit,attribs:workloads.attribs};if(workloads.createDeployment&&(data.name=workloads.name),!workloads.use_system){var hints=$scope.providerMap[workloads.provider].auth_details["provider-create-hint"];if(!hints){var ptype=$scope.providerMap[workloads.provider].type;hints=$scope.providerTemplates[ptype]["provider-create-hint"]["default"]}data.provider={name:workloads.provider,hints:hints}}console.log("JSON generating nodes in "+data);var virtualNodes=0,gcount=0;data.nodes=[],workloads.selected.forEach(function(node){var id=node.id,roles=[];console.log("JSON generate adding roles to node "+node);for(var j in wizard.services){var service=wizard.services[j],hasService=serviceMap[node.id][service.name];if(hasService)for(var k in service.roles){var serviceRoles=service.roles[k];for(var l in serviceRoles){var reqs=serviceRoles[l];serviceMap[node.id][k]&&roles.indexOf(reqs)<0&&roles.push(reqs)}}}if(roles=roles.sort(),id>0)data.nodes.push({id:$scope._nodes[id].name,roles:roles});else{var existing=!1;for(var _j5 in data.nodes){var n=data.nodes[_j5];if(!("string"==typeof n.id||n.id>0)&&JSON.stringify(n.roles)===JSON.stringify(roles)){n.count++,existing=!0;break}}existing||(gcount+=1,data.nodes.push({id:-++virtualNodes,prefix:workloads.name+"-group-"+gcount,roles:roles,count:1}))}}),console.log("JSON generate adding keys");for(var k in workloads.keys)if(workloads.keys[k]){var kvp=workloads.keys[k];kvp&&kvp[1].length>20&&(data.public_keys||(data.public_keys={}),data.public_keys[kvp[0]]=kvp[1])}return console.log("JSON generate apply order"),wizard.role_apply_order&&wizard.role_apply_order.length>1&&(data.role_apply_order=wizard.role_apply_order),data}}])}()}),require.register("___globals___",function(exports,require,module){})}(),require("___globals___");